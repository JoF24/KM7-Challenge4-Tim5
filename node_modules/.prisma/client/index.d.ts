
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Fuel
 * 
 */
export type Fuel = $Result.DefaultSelection<Prisma.$FuelPayload>
/**
 * Model Manufacture
 * 
 */
export type Manufacture = $Result.DefaultSelection<Prisma.$ManufacturePayload>
/**
 * Model Model
 * 
 */
export type Model = $Result.DefaultSelection<Prisma.$ModelPayload>
/**
 * Model Transmission
 * 
 */
export type Transmission = $Result.DefaultSelection<Prisma.$TransmissionPayload>
/**
 * Model Type
 * 
 */
export type Type = $Result.DefaultSelection<Prisma.$TypePayload>
/**
 * Model cars
 * 
 */
export type cars = $Result.DefaultSelection<Prisma.$carsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Fuels
 * const fuels = await prisma.fuel.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Fuels
   * const fuels = await prisma.fuel.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.fuel`: Exposes CRUD operations for the **Fuel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fuels
    * const fuels = await prisma.fuel.findMany()
    * ```
    */
  get fuel(): Prisma.FuelDelegate<ExtArgs>;

  /**
   * `prisma.manufacture`: Exposes CRUD operations for the **Manufacture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Manufactures
    * const manufactures = await prisma.manufacture.findMany()
    * ```
    */
  get manufacture(): Prisma.ManufactureDelegate<ExtArgs>;

  /**
   * `prisma.model`: Exposes CRUD operations for the **Model** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Models
    * const models = await prisma.model.findMany()
    * ```
    */
  get model(): Prisma.ModelDelegate<ExtArgs>;

  /**
   * `prisma.transmission`: Exposes CRUD operations for the **Transmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transmissions
    * const transmissions = await prisma.transmission.findMany()
    * ```
    */
  get transmission(): Prisma.TransmissionDelegate<ExtArgs>;

  /**
   * `prisma.type`: Exposes CRUD operations for the **Type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Types
    * const types = await prisma.type.findMany()
    * ```
    */
  get type(): Prisma.TypeDelegate<ExtArgs>;

  /**
   * `prisma.cars`: Exposes CRUD operations for the **cars** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cars
    * const cars = await prisma.cars.findMany()
    * ```
    */
  get cars(): Prisma.carsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Fuel: 'Fuel',
    Manufacture: 'Manufacture',
    Model: 'Model',
    Transmission: 'Transmission',
    Type: 'Type',
    cars: 'cars'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "fuel" | "manufacture" | "model" | "transmission" | "type" | "cars"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Fuel: {
        payload: Prisma.$FuelPayload<ExtArgs>
        fields: Prisma.FuelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FuelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FuelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuelPayload>
          }
          findFirst: {
            args: Prisma.FuelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FuelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuelPayload>
          }
          findMany: {
            args: Prisma.FuelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuelPayload>[]
          }
          create: {
            args: Prisma.FuelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuelPayload>
          }
          createMany: {
            args: Prisma.FuelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FuelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuelPayload>[]
          }
          delete: {
            args: Prisma.FuelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuelPayload>
          }
          update: {
            args: Prisma.FuelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuelPayload>
          }
          deleteMany: {
            args: Prisma.FuelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FuelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FuelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuelPayload>
          }
          aggregate: {
            args: Prisma.FuelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFuel>
          }
          groupBy: {
            args: Prisma.FuelGroupByArgs<ExtArgs>
            result: $Utils.Optional<FuelGroupByOutputType>[]
          }
          count: {
            args: Prisma.FuelCountArgs<ExtArgs>
            result: $Utils.Optional<FuelCountAggregateOutputType> | number
          }
        }
      }
      Manufacture: {
        payload: Prisma.$ManufacturePayload<ExtArgs>
        fields: Prisma.ManufactureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ManufactureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ManufactureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturePayload>
          }
          findFirst: {
            args: Prisma.ManufactureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ManufactureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturePayload>
          }
          findMany: {
            args: Prisma.ManufactureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturePayload>[]
          }
          create: {
            args: Prisma.ManufactureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturePayload>
          }
          createMany: {
            args: Prisma.ManufactureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ManufactureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturePayload>[]
          }
          delete: {
            args: Prisma.ManufactureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturePayload>
          }
          update: {
            args: Prisma.ManufactureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturePayload>
          }
          deleteMany: {
            args: Prisma.ManufactureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ManufactureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ManufactureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManufacturePayload>
          }
          aggregate: {
            args: Prisma.ManufactureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateManufacture>
          }
          groupBy: {
            args: Prisma.ManufactureGroupByArgs<ExtArgs>
            result: $Utils.Optional<ManufactureGroupByOutputType>[]
          }
          count: {
            args: Prisma.ManufactureCountArgs<ExtArgs>
            result: $Utils.Optional<ManufactureCountAggregateOutputType> | number
          }
        }
      }
      Model: {
        payload: Prisma.$ModelPayload<ExtArgs>
        fields: Prisma.ModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ModelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ModelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          findFirst: {
            args: Prisma.ModelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ModelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          findMany: {
            args: Prisma.ModelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>[]
          }
          create: {
            args: Prisma.ModelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          createMany: {
            args: Prisma.ModelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ModelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>[]
          }
          delete: {
            args: Prisma.ModelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          update: {
            args: Prisma.ModelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          deleteMany: {
            args: Prisma.ModelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ModelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ModelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ModelPayload>
          }
          aggregate: {
            args: Prisma.ModelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateModel>
          }
          groupBy: {
            args: Prisma.ModelGroupByArgs<ExtArgs>
            result: $Utils.Optional<ModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ModelCountArgs<ExtArgs>
            result: $Utils.Optional<ModelCountAggregateOutputType> | number
          }
        }
      }
      Transmission: {
        payload: Prisma.$TransmissionPayload<ExtArgs>
        fields: Prisma.TransmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransmissionPayload>
          }
          findFirst: {
            args: Prisma.TransmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransmissionPayload>
          }
          findMany: {
            args: Prisma.TransmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransmissionPayload>[]
          }
          create: {
            args: Prisma.TransmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransmissionPayload>
          }
          createMany: {
            args: Prisma.TransmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransmissionPayload>[]
          }
          delete: {
            args: Prisma.TransmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransmissionPayload>
          }
          update: {
            args: Prisma.TransmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransmissionPayload>
          }
          deleteMany: {
            args: Prisma.TransmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransmissionPayload>
          }
          aggregate: {
            args: Prisma.TransmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransmission>
          }
          groupBy: {
            args: Prisma.TransmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransmissionCountArgs<ExtArgs>
            result: $Utils.Optional<TransmissionCountAggregateOutputType> | number
          }
        }
      }
      Type: {
        payload: Prisma.$TypePayload<ExtArgs>
        fields: Prisma.TypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          findFirst: {
            args: Prisma.TypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          findMany: {
            args: Prisma.TypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypePayload>[]
          }
          create: {
            args: Prisma.TypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          createMany: {
            args: Prisma.TypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypePayload>[]
          }
          delete: {
            args: Prisma.TypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          update: {
            args: Prisma.TypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          deleteMany: {
            args: Prisma.TypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          aggregate: {
            args: Prisma.TypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateType>
          }
          groupBy: {
            args: Prisma.TypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<TypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TypeCountArgs<ExtArgs>
            result: $Utils.Optional<TypeCountAggregateOutputType> | number
          }
        }
      }
      cars: {
        payload: Prisma.$carsPayload<ExtArgs>
        fields: Prisma.carsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.carsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.carsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carsPayload>
          }
          findFirst: {
            args: Prisma.carsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.carsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carsPayload>
          }
          findMany: {
            args: Prisma.carsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carsPayload>[]
          }
          create: {
            args: Prisma.carsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carsPayload>
          }
          createMany: {
            args: Prisma.carsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.carsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carsPayload>[]
          }
          delete: {
            args: Prisma.carsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carsPayload>
          }
          update: {
            args: Prisma.carsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carsPayload>
          }
          deleteMany: {
            args: Prisma.carsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.carsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.carsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$carsPayload>
          }
          aggregate: {
            args: Prisma.CarsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCars>
          }
          groupBy: {
            args: Prisma.carsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CarsGroupByOutputType>[]
          }
          count: {
            args: Prisma.carsCountArgs<ExtArgs>
            result: $Utils.Optional<CarsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FuelCountOutputType
   */

  export type FuelCountOutputType = {
    cars: number
  }

  export type FuelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | FuelCountOutputTypeCountCarsArgs
  }

  // Custom InputTypes
  /**
   * FuelCountOutputType without action
   */
  export type FuelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuelCountOutputType
     */
    select?: FuelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FuelCountOutputType without action
   */
  export type FuelCountOutputTypeCountCarsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carsWhereInput
  }


  /**
   * Count Type ManufactureCountOutputType
   */

  export type ManufactureCountOutputType = {
    cars: number
  }

  export type ManufactureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | ManufactureCountOutputTypeCountCarsArgs
  }

  // Custom InputTypes
  /**
   * ManufactureCountOutputType without action
   */
  export type ManufactureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManufactureCountOutputType
     */
    select?: ManufactureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ManufactureCountOutputType without action
   */
  export type ManufactureCountOutputTypeCountCarsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carsWhereInput
  }


  /**
   * Count Type ModelCountOutputType
   */

  export type ModelCountOutputType = {
    cars: number
  }

  export type ModelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | ModelCountOutputTypeCountCarsArgs
  }

  // Custom InputTypes
  /**
   * ModelCountOutputType without action
   */
  export type ModelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ModelCountOutputType
     */
    select?: ModelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ModelCountOutputType without action
   */
  export type ModelCountOutputTypeCountCarsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carsWhereInput
  }


  /**
   * Count Type TransmissionCountOutputType
   */

  export type TransmissionCountOutputType = {
    cars: number
  }

  export type TransmissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | TransmissionCountOutputTypeCountCarsArgs
  }

  // Custom InputTypes
  /**
   * TransmissionCountOutputType without action
   */
  export type TransmissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransmissionCountOutputType
     */
    select?: TransmissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransmissionCountOutputType without action
   */
  export type TransmissionCountOutputTypeCountCarsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carsWhereInput
  }


  /**
   * Count Type TypeCountOutputType
   */

  export type TypeCountOutputType = {
    cars: number
  }

  export type TypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | TypeCountOutputTypeCountCarsArgs
  }

  // Custom InputTypes
  /**
   * TypeCountOutputType without action
   */
  export type TypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeCountOutputType
     */
    select?: TypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TypeCountOutputType without action
   */
  export type TypeCountOutputTypeCountCarsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Fuel
   */

  export type AggregateFuel = {
    _count: FuelCountAggregateOutputType | null
    _avg: FuelAvgAggregateOutputType | null
    _sum: FuelSumAggregateOutputType | null
    _min: FuelMinAggregateOutputType | null
    _max: FuelMaxAggregateOutputType | null
  }

  export type FuelAvgAggregateOutputType = {
    id: number | null
    price: number | null
    octan_rating: number | null
  }

  export type FuelSumAggregateOutputType = {
    id: bigint | null
    price: number | null
    octan_rating: number | null
  }

  export type FuelMinAggregateOutputType = {
    id: bigint | null
    type: string | null
    price: number | null
    octan_rating: number | null
  }

  export type FuelMaxAggregateOutputType = {
    id: bigint | null
    type: string | null
    price: number | null
    octan_rating: number | null
  }

  export type FuelCountAggregateOutputType = {
    id: number
    type: number
    price: number
    octan_rating: number
    _all: number
  }


  export type FuelAvgAggregateInputType = {
    id?: true
    price?: true
    octan_rating?: true
  }

  export type FuelSumAggregateInputType = {
    id?: true
    price?: true
    octan_rating?: true
  }

  export type FuelMinAggregateInputType = {
    id?: true
    type?: true
    price?: true
    octan_rating?: true
  }

  export type FuelMaxAggregateInputType = {
    id?: true
    type?: true
    price?: true
    octan_rating?: true
  }

  export type FuelCountAggregateInputType = {
    id?: true
    type?: true
    price?: true
    octan_rating?: true
    _all?: true
  }

  export type FuelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fuel to aggregate.
     */
    where?: FuelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fuels to fetch.
     */
    orderBy?: FuelOrderByWithRelationInput | FuelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FuelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fuels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fuels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fuels
    **/
    _count?: true | FuelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FuelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FuelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FuelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FuelMaxAggregateInputType
  }

  export type GetFuelAggregateType<T extends FuelAggregateArgs> = {
        [P in keyof T & keyof AggregateFuel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFuel[P]>
      : GetScalarType<T[P], AggregateFuel[P]>
  }




  export type FuelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FuelWhereInput
    orderBy?: FuelOrderByWithAggregationInput | FuelOrderByWithAggregationInput[]
    by: FuelScalarFieldEnum[] | FuelScalarFieldEnum
    having?: FuelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FuelCountAggregateInputType | true
    _avg?: FuelAvgAggregateInputType
    _sum?: FuelSumAggregateInputType
    _min?: FuelMinAggregateInputType
    _max?: FuelMaxAggregateInputType
  }

  export type FuelGroupByOutputType = {
    id: bigint
    type: string
    price: number
    octan_rating: number
    _count: FuelCountAggregateOutputType | null
    _avg: FuelAvgAggregateOutputType | null
    _sum: FuelSumAggregateOutputType | null
    _min: FuelMinAggregateOutputType | null
    _max: FuelMaxAggregateOutputType | null
  }

  type GetFuelGroupByPayload<T extends FuelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FuelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FuelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FuelGroupByOutputType[P]>
            : GetScalarType<T[P], FuelGroupByOutputType[P]>
        }
      >
    >


  export type FuelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    price?: boolean
    octan_rating?: boolean
    cars?: boolean | Fuel$carsArgs<ExtArgs>
    _count?: boolean | FuelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fuel"]>

  export type FuelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    price?: boolean
    octan_rating?: boolean
  }, ExtArgs["result"]["fuel"]>

  export type FuelSelectScalar = {
    id?: boolean
    type?: boolean
    price?: boolean
    octan_rating?: boolean
  }

  export type FuelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | Fuel$carsArgs<ExtArgs>
    _count?: boolean | FuelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FuelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FuelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fuel"
    objects: {
      cars: Prisma.$carsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      type: string
      price: number
      octan_rating: number
    }, ExtArgs["result"]["fuel"]>
    composites: {}
  }

  type FuelGetPayload<S extends boolean | null | undefined | FuelDefaultArgs> = $Result.GetResult<Prisma.$FuelPayload, S>

  type FuelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FuelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FuelCountAggregateInputType | true
    }

  export interface FuelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fuel'], meta: { name: 'Fuel' } }
    /**
     * Find zero or one Fuel that matches the filter.
     * @param {FuelFindUniqueArgs} args - Arguments to find a Fuel
     * @example
     * // Get one Fuel
     * const fuel = await prisma.fuel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FuelFindUniqueArgs>(args: SelectSubset<T, FuelFindUniqueArgs<ExtArgs>>): Prisma__FuelClient<$Result.GetResult<Prisma.$FuelPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Fuel that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FuelFindUniqueOrThrowArgs} args - Arguments to find a Fuel
     * @example
     * // Get one Fuel
     * const fuel = await prisma.fuel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FuelFindUniqueOrThrowArgs>(args: SelectSubset<T, FuelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FuelClient<$Result.GetResult<Prisma.$FuelPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Fuel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuelFindFirstArgs} args - Arguments to find a Fuel
     * @example
     * // Get one Fuel
     * const fuel = await prisma.fuel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FuelFindFirstArgs>(args?: SelectSubset<T, FuelFindFirstArgs<ExtArgs>>): Prisma__FuelClient<$Result.GetResult<Prisma.$FuelPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Fuel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuelFindFirstOrThrowArgs} args - Arguments to find a Fuel
     * @example
     * // Get one Fuel
     * const fuel = await prisma.fuel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FuelFindFirstOrThrowArgs>(args?: SelectSubset<T, FuelFindFirstOrThrowArgs<ExtArgs>>): Prisma__FuelClient<$Result.GetResult<Prisma.$FuelPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Fuels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fuels
     * const fuels = await prisma.fuel.findMany()
     * 
     * // Get first 10 Fuels
     * const fuels = await prisma.fuel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fuelWithIdOnly = await prisma.fuel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FuelFindManyArgs>(args?: SelectSubset<T, FuelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuelPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Fuel.
     * @param {FuelCreateArgs} args - Arguments to create a Fuel.
     * @example
     * // Create one Fuel
     * const Fuel = await prisma.fuel.create({
     *   data: {
     *     // ... data to create a Fuel
     *   }
     * })
     * 
     */
    create<T extends FuelCreateArgs>(args: SelectSubset<T, FuelCreateArgs<ExtArgs>>): Prisma__FuelClient<$Result.GetResult<Prisma.$FuelPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Fuels.
     * @param {FuelCreateManyArgs} args - Arguments to create many Fuels.
     * @example
     * // Create many Fuels
     * const fuel = await prisma.fuel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FuelCreateManyArgs>(args?: SelectSubset<T, FuelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fuels and returns the data saved in the database.
     * @param {FuelCreateManyAndReturnArgs} args - Arguments to create many Fuels.
     * @example
     * // Create many Fuels
     * const fuel = await prisma.fuel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fuels and only return the `id`
     * const fuelWithIdOnly = await prisma.fuel.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FuelCreateManyAndReturnArgs>(args?: SelectSubset<T, FuelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuelPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Fuel.
     * @param {FuelDeleteArgs} args - Arguments to delete one Fuel.
     * @example
     * // Delete one Fuel
     * const Fuel = await prisma.fuel.delete({
     *   where: {
     *     // ... filter to delete one Fuel
     *   }
     * })
     * 
     */
    delete<T extends FuelDeleteArgs>(args: SelectSubset<T, FuelDeleteArgs<ExtArgs>>): Prisma__FuelClient<$Result.GetResult<Prisma.$FuelPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Fuel.
     * @param {FuelUpdateArgs} args - Arguments to update one Fuel.
     * @example
     * // Update one Fuel
     * const fuel = await prisma.fuel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FuelUpdateArgs>(args: SelectSubset<T, FuelUpdateArgs<ExtArgs>>): Prisma__FuelClient<$Result.GetResult<Prisma.$FuelPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Fuels.
     * @param {FuelDeleteManyArgs} args - Arguments to filter Fuels to delete.
     * @example
     * // Delete a few Fuels
     * const { count } = await prisma.fuel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FuelDeleteManyArgs>(args?: SelectSubset<T, FuelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fuels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fuels
     * const fuel = await prisma.fuel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FuelUpdateManyArgs>(args: SelectSubset<T, FuelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fuel.
     * @param {FuelUpsertArgs} args - Arguments to update or create a Fuel.
     * @example
     * // Update or create a Fuel
     * const fuel = await prisma.fuel.upsert({
     *   create: {
     *     // ... data to create a Fuel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fuel we want to update
     *   }
     * })
     */
    upsert<T extends FuelUpsertArgs>(args: SelectSubset<T, FuelUpsertArgs<ExtArgs>>): Prisma__FuelClient<$Result.GetResult<Prisma.$FuelPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Fuels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuelCountArgs} args - Arguments to filter Fuels to count.
     * @example
     * // Count the number of Fuels
     * const count = await prisma.fuel.count({
     *   where: {
     *     // ... the filter for the Fuels we want to count
     *   }
     * })
    **/
    count<T extends FuelCountArgs>(
      args?: Subset<T, FuelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FuelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fuel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FuelAggregateArgs>(args: Subset<T, FuelAggregateArgs>): Prisma.PrismaPromise<GetFuelAggregateType<T>>

    /**
     * Group by Fuel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FuelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FuelGroupByArgs['orderBy'] }
        : { orderBy?: FuelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FuelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFuelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fuel model
   */
  readonly fields: FuelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fuel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FuelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cars<T extends Fuel$carsArgs<ExtArgs> = {}>(args?: Subset<T, Fuel$carsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Fuel model
   */ 
  interface FuelFieldRefs {
    readonly id: FieldRef<"Fuel", 'BigInt'>
    readonly type: FieldRef<"Fuel", 'String'>
    readonly price: FieldRef<"Fuel", 'Float'>
    readonly octan_rating: FieldRef<"Fuel", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Fuel findUnique
   */
  export type FuelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fuel
     */
    select?: FuelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuelInclude<ExtArgs> | null
    /**
     * Filter, which Fuel to fetch.
     */
    where: FuelWhereUniqueInput
  }

  /**
   * Fuel findUniqueOrThrow
   */
  export type FuelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fuel
     */
    select?: FuelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuelInclude<ExtArgs> | null
    /**
     * Filter, which Fuel to fetch.
     */
    where: FuelWhereUniqueInput
  }

  /**
   * Fuel findFirst
   */
  export type FuelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fuel
     */
    select?: FuelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuelInclude<ExtArgs> | null
    /**
     * Filter, which Fuel to fetch.
     */
    where?: FuelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fuels to fetch.
     */
    orderBy?: FuelOrderByWithRelationInput | FuelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fuels.
     */
    cursor?: FuelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fuels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fuels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fuels.
     */
    distinct?: FuelScalarFieldEnum | FuelScalarFieldEnum[]
  }

  /**
   * Fuel findFirstOrThrow
   */
  export type FuelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fuel
     */
    select?: FuelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuelInclude<ExtArgs> | null
    /**
     * Filter, which Fuel to fetch.
     */
    where?: FuelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fuels to fetch.
     */
    orderBy?: FuelOrderByWithRelationInput | FuelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fuels.
     */
    cursor?: FuelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fuels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fuels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fuels.
     */
    distinct?: FuelScalarFieldEnum | FuelScalarFieldEnum[]
  }

  /**
   * Fuel findMany
   */
  export type FuelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fuel
     */
    select?: FuelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuelInclude<ExtArgs> | null
    /**
     * Filter, which Fuels to fetch.
     */
    where?: FuelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fuels to fetch.
     */
    orderBy?: FuelOrderByWithRelationInput | FuelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fuels.
     */
    cursor?: FuelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fuels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fuels.
     */
    skip?: number
    distinct?: FuelScalarFieldEnum | FuelScalarFieldEnum[]
  }

  /**
   * Fuel create
   */
  export type FuelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fuel
     */
    select?: FuelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuelInclude<ExtArgs> | null
    /**
     * The data needed to create a Fuel.
     */
    data: XOR<FuelCreateInput, FuelUncheckedCreateInput>
  }

  /**
   * Fuel createMany
   */
  export type FuelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fuels.
     */
    data: FuelCreateManyInput | FuelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fuel createManyAndReturn
   */
  export type FuelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fuel
     */
    select?: FuelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Fuels.
     */
    data: FuelCreateManyInput | FuelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fuel update
   */
  export type FuelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fuel
     */
    select?: FuelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuelInclude<ExtArgs> | null
    /**
     * The data needed to update a Fuel.
     */
    data: XOR<FuelUpdateInput, FuelUncheckedUpdateInput>
    /**
     * Choose, which Fuel to update.
     */
    where: FuelWhereUniqueInput
  }

  /**
   * Fuel updateMany
   */
  export type FuelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fuels.
     */
    data: XOR<FuelUpdateManyMutationInput, FuelUncheckedUpdateManyInput>
    /**
     * Filter which Fuels to update
     */
    where?: FuelWhereInput
  }

  /**
   * Fuel upsert
   */
  export type FuelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fuel
     */
    select?: FuelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuelInclude<ExtArgs> | null
    /**
     * The filter to search for the Fuel to update in case it exists.
     */
    where: FuelWhereUniqueInput
    /**
     * In case the Fuel found by the `where` argument doesn't exist, create a new Fuel with this data.
     */
    create: XOR<FuelCreateInput, FuelUncheckedCreateInput>
    /**
     * In case the Fuel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FuelUpdateInput, FuelUncheckedUpdateInput>
  }

  /**
   * Fuel delete
   */
  export type FuelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fuel
     */
    select?: FuelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuelInclude<ExtArgs> | null
    /**
     * Filter which Fuel to delete.
     */
    where: FuelWhereUniqueInput
  }

  /**
   * Fuel deleteMany
   */
  export type FuelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fuels to delete
     */
    where?: FuelWhereInput
  }

  /**
   * Fuel.cars
   */
  export type Fuel$carsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    where?: carsWhereInput
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    cursor?: carsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }

  /**
   * Fuel without action
   */
  export type FuelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fuel
     */
    select?: FuelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuelInclude<ExtArgs> | null
  }


  /**
   * Model Manufacture
   */

  export type AggregateManufacture = {
    _count: ManufactureCountAggregateOutputType | null
    _avg: ManufactureAvgAggregateOutputType | null
    _sum: ManufactureSumAggregateOutputType | null
    _min: ManufactureMinAggregateOutputType | null
    _max: ManufactureMaxAggregateOutputType | null
  }

  export type ManufactureAvgAggregateOutputType = {
    id: number | null
  }

  export type ManufactureSumAggregateOutputType = {
    id: bigint | null
  }

  export type ManufactureMinAggregateOutputType = {
    id: bigint | null
    manufacture: string | null
    address: string | null
  }

  export type ManufactureMaxAggregateOutputType = {
    id: bigint | null
    manufacture: string | null
    address: string | null
  }

  export type ManufactureCountAggregateOutputType = {
    id: number
    manufacture: number
    address: number
    _all: number
  }


  export type ManufactureAvgAggregateInputType = {
    id?: true
  }

  export type ManufactureSumAggregateInputType = {
    id?: true
  }

  export type ManufactureMinAggregateInputType = {
    id?: true
    manufacture?: true
    address?: true
  }

  export type ManufactureMaxAggregateInputType = {
    id?: true
    manufacture?: true
    address?: true
  }

  export type ManufactureCountAggregateInputType = {
    id?: true
    manufacture?: true
    address?: true
    _all?: true
  }

  export type ManufactureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Manufacture to aggregate.
     */
    where?: ManufactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manufactures to fetch.
     */
    orderBy?: ManufactureOrderByWithRelationInput | ManufactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ManufactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manufactures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manufactures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Manufactures
    **/
    _count?: true | ManufactureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ManufactureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ManufactureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ManufactureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ManufactureMaxAggregateInputType
  }

  export type GetManufactureAggregateType<T extends ManufactureAggregateArgs> = {
        [P in keyof T & keyof AggregateManufacture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManufacture[P]>
      : GetScalarType<T[P], AggregateManufacture[P]>
  }




  export type ManufactureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManufactureWhereInput
    orderBy?: ManufactureOrderByWithAggregationInput | ManufactureOrderByWithAggregationInput[]
    by: ManufactureScalarFieldEnum[] | ManufactureScalarFieldEnum
    having?: ManufactureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ManufactureCountAggregateInputType | true
    _avg?: ManufactureAvgAggregateInputType
    _sum?: ManufactureSumAggregateInputType
    _min?: ManufactureMinAggregateInputType
    _max?: ManufactureMaxAggregateInputType
  }

  export type ManufactureGroupByOutputType = {
    id: bigint
    manufacture: string
    address: string | null
    _count: ManufactureCountAggregateOutputType | null
    _avg: ManufactureAvgAggregateOutputType | null
    _sum: ManufactureSumAggregateOutputType | null
    _min: ManufactureMinAggregateOutputType | null
    _max: ManufactureMaxAggregateOutputType | null
  }

  type GetManufactureGroupByPayload<T extends ManufactureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ManufactureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ManufactureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ManufactureGroupByOutputType[P]>
            : GetScalarType<T[P], ManufactureGroupByOutputType[P]>
        }
      >
    >


  export type ManufactureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    manufacture?: boolean
    address?: boolean
    cars?: boolean | Manufacture$carsArgs<ExtArgs>
    _count?: boolean | ManufactureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["manufacture"]>

  export type ManufactureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    manufacture?: boolean
    address?: boolean
  }, ExtArgs["result"]["manufacture"]>

  export type ManufactureSelectScalar = {
    id?: boolean
    manufacture?: boolean
    address?: boolean
  }

  export type ManufactureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | Manufacture$carsArgs<ExtArgs>
    _count?: boolean | ManufactureCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ManufactureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ManufacturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Manufacture"
    objects: {
      cars: Prisma.$carsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      manufacture: string
      address: string | null
    }, ExtArgs["result"]["manufacture"]>
    composites: {}
  }

  type ManufactureGetPayload<S extends boolean | null | undefined | ManufactureDefaultArgs> = $Result.GetResult<Prisma.$ManufacturePayload, S>

  type ManufactureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ManufactureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ManufactureCountAggregateInputType | true
    }

  export interface ManufactureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Manufacture'], meta: { name: 'Manufacture' } }
    /**
     * Find zero or one Manufacture that matches the filter.
     * @param {ManufactureFindUniqueArgs} args - Arguments to find a Manufacture
     * @example
     * // Get one Manufacture
     * const manufacture = await prisma.manufacture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ManufactureFindUniqueArgs>(args: SelectSubset<T, ManufactureFindUniqueArgs<ExtArgs>>): Prisma__ManufactureClient<$Result.GetResult<Prisma.$ManufacturePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Manufacture that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ManufactureFindUniqueOrThrowArgs} args - Arguments to find a Manufacture
     * @example
     * // Get one Manufacture
     * const manufacture = await prisma.manufacture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ManufactureFindUniqueOrThrowArgs>(args: SelectSubset<T, ManufactureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ManufactureClient<$Result.GetResult<Prisma.$ManufacturePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Manufacture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufactureFindFirstArgs} args - Arguments to find a Manufacture
     * @example
     * // Get one Manufacture
     * const manufacture = await prisma.manufacture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ManufactureFindFirstArgs>(args?: SelectSubset<T, ManufactureFindFirstArgs<ExtArgs>>): Prisma__ManufactureClient<$Result.GetResult<Prisma.$ManufacturePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Manufacture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufactureFindFirstOrThrowArgs} args - Arguments to find a Manufacture
     * @example
     * // Get one Manufacture
     * const manufacture = await prisma.manufacture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ManufactureFindFirstOrThrowArgs>(args?: SelectSubset<T, ManufactureFindFirstOrThrowArgs<ExtArgs>>): Prisma__ManufactureClient<$Result.GetResult<Prisma.$ManufacturePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Manufactures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufactureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Manufactures
     * const manufactures = await prisma.manufacture.findMany()
     * 
     * // Get first 10 Manufactures
     * const manufactures = await prisma.manufacture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const manufactureWithIdOnly = await prisma.manufacture.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ManufactureFindManyArgs>(args?: SelectSubset<T, ManufactureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManufacturePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Manufacture.
     * @param {ManufactureCreateArgs} args - Arguments to create a Manufacture.
     * @example
     * // Create one Manufacture
     * const Manufacture = await prisma.manufacture.create({
     *   data: {
     *     // ... data to create a Manufacture
     *   }
     * })
     * 
     */
    create<T extends ManufactureCreateArgs>(args: SelectSubset<T, ManufactureCreateArgs<ExtArgs>>): Prisma__ManufactureClient<$Result.GetResult<Prisma.$ManufacturePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Manufactures.
     * @param {ManufactureCreateManyArgs} args - Arguments to create many Manufactures.
     * @example
     * // Create many Manufactures
     * const manufacture = await prisma.manufacture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ManufactureCreateManyArgs>(args?: SelectSubset<T, ManufactureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Manufactures and returns the data saved in the database.
     * @param {ManufactureCreateManyAndReturnArgs} args - Arguments to create many Manufactures.
     * @example
     * // Create many Manufactures
     * const manufacture = await prisma.manufacture.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Manufactures and only return the `id`
     * const manufactureWithIdOnly = await prisma.manufacture.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ManufactureCreateManyAndReturnArgs>(args?: SelectSubset<T, ManufactureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManufacturePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Manufacture.
     * @param {ManufactureDeleteArgs} args - Arguments to delete one Manufacture.
     * @example
     * // Delete one Manufacture
     * const Manufacture = await prisma.manufacture.delete({
     *   where: {
     *     // ... filter to delete one Manufacture
     *   }
     * })
     * 
     */
    delete<T extends ManufactureDeleteArgs>(args: SelectSubset<T, ManufactureDeleteArgs<ExtArgs>>): Prisma__ManufactureClient<$Result.GetResult<Prisma.$ManufacturePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Manufacture.
     * @param {ManufactureUpdateArgs} args - Arguments to update one Manufacture.
     * @example
     * // Update one Manufacture
     * const manufacture = await prisma.manufacture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ManufactureUpdateArgs>(args: SelectSubset<T, ManufactureUpdateArgs<ExtArgs>>): Prisma__ManufactureClient<$Result.GetResult<Prisma.$ManufacturePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Manufactures.
     * @param {ManufactureDeleteManyArgs} args - Arguments to filter Manufactures to delete.
     * @example
     * // Delete a few Manufactures
     * const { count } = await prisma.manufacture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ManufactureDeleteManyArgs>(args?: SelectSubset<T, ManufactureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Manufactures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufactureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Manufactures
     * const manufacture = await prisma.manufacture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ManufactureUpdateManyArgs>(args: SelectSubset<T, ManufactureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Manufacture.
     * @param {ManufactureUpsertArgs} args - Arguments to update or create a Manufacture.
     * @example
     * // Update or create a Manufacture
     * const manufacture = await prisma.manufacture.upsert({
     *   create: {
     *     // ... data to create a Manufacture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Manufacture we want to update
     *   }
     * })
     */
    upsert<T extends ManufactureUpsertArgs>(args: SelectSubset<T, ManufactureUpsertArgs<ExtArgs>>): Prisma__ManufactureClient<$Result.GetResult<Prisma.$ManufacturePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Manufactures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufactureCountArgs} args - Arguments to filter Manufactures to count.
     * @example
     * // Count the number of Manufactures
     * const count = await prisma.manufacture.count({
     *   where: {
     *     // ... the filter for the Manufactures we want to count
     *   }
     * })
    **/
    count<T extends ManufactureCountArgs>(
      args?: Subset<T, ManufactureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ManufactureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Manufacture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufactureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ManufactureAggregateArgs>(args: Subset<T, ManufactureAggregateArgs>): Prisma.PrismaPromise<GetManufactureAggregateType<T>>

    /**
     * Group by Manufacture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManufactureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ManufactureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ManufactureGroupByArgs['orderBy'] }
        : { orderBy?: ManufactureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ManufactureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManufactureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Manufacture model
   */
  readonly fields: ManufactureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Manufacture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ManufactureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cars<T extends Manufacture$carsArgs<ExtArgs> = {}>(args?: Subset<T, Manufacture$carsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Manufacture model
   */ 
  interface ManufactureFieldRefs {
    readonly id: FieldRef<"Manufacture", 'BigInt'>
    readonly manufacture: FieldRef<"Manufacture", 'String'>
    readonly address: FieldRef<"Manufacture", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Manufacture findUnique
   */
  export type ManufactureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacture
     */
    select?: ManufactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufactureInclude<ExtArgs> | null
    /**
     * Filter, which Manufacture to fetch.
     */
    where: ManufactureWhereUniqueInput
  }

  /**
   * Manufacture findUniqueOrThrow
   */
  export type ManufactureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacture
     */
    select?: ManufactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufactureInclude<ExtArgs> | null
    /**
     * Filter, which Manufacture to fetch.
     */
    where: ManufactureWhereUniqueInput
  }

  /**
   * Manufacture findFirst
   */
  export type ManufactureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacture
     */
    select?: ManufactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufactureInclude<ExtArgs> | null
    /**
     * Filter, which Manufacture to fetch.
     */
    where?: ManufactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manufactures to fetch.
     */
    orderBy?: ManufactureOrderByWithRelationInput | ManufactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Manufactures.
     */
    cursor?: ManufactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manufactures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manufactures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Manufactures.
     */
    distinct?: ManufactureScalarFieldEnum | ManufactureScalarFieldEnum[]
  }

  /**
   * Manufacture findFirstOrThrow
   */
  export type ManufactureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacture
     */
    select?: ManufactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufactureInclude<ExtArgs> | null
    /**
     * Filter, which Manufacture to fetch.
     */
    where?: ManufactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manufactures to fetch.
     */
    orderBy?: ManufactureOrderByWithRelationInput | ManufactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Manufactures.
     */
    cursor?: ManufactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manufactures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manufactures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Manufactures.
     */
    distinct?: ManufactureScalarFieldEnum | ManufactureScalarFieldEnum[]
  }

  /**
   * Manufacture findMany
   */
  export type ManufactureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacture
     */
    select?: ManufactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufactureInclude<ExtArgs> | null
    /**
     * Filter, which Manufactures to fetch.
     */
    where?: ManufactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Manufactures to fetch.
     */
    orderBy?: ManufactureOrderByWithRelationInput | ManufactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Manufactures.
     */
    cursor?: ManufactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Manufactures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Manufactures.
     */
    skip?: number
    distinct?: ManufactureScalarFieldEnum | ManufactureScalarFieldEnum[]
  }

  /**
   * Manufacture create
   */
  export type ManufactureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacture
     */
    select?: ManufactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufactureInclude<ExtArgs> | null
    /**
     * The data needed to create a Manufacture.
     */
    data: XOR<ManufactureCreateInput, ManufactureUncheckedCreateInput>
  }

  /**
   * Manufacture createMany
   */
  export type ManufactureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Manufactures.
     */
    data: ManufactureCreateManyInput | ManufactureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Manufacture createManyAndReturn
   */
  export type ManufactureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacture
     */
    select?: ManufactureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Manufactures.
     */
    data: ManufactureCreateManyInput | ManufactureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Manufacture update
   */
  export type ManufactureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacture
     */
    select?: ManufactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufactureInclude<ExtArgs> | null
    /**
     * The data needed to update a Manufacture.
     */
    data: XOR<ManufactureUpdateInput, ManufactureUncheckedUpdateInput>
    /**
     * Choose, which Manufacture to update.
     */
    where: ManufactureWhereUniqueInput
  }

  /**
   * Manufacture updateMany
   */
  export type ManufactureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Manufactures.
     */
    data: XOR<ManufactureUpdateManyMutationInput, ManufactureUncheckedUpdateManyInput>
    /**
     * Filter which Manufactures to update
     */
    where?: ManufactureWhereInput
  }

  /**
   * Manufacture upsert
   */
  export type ManufactureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacture
     */
    select?: ManufactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufactureInclude<ExtArgs> | null
    /**
     * The filter to search for the Manufacture to update in case it exists.
     */
    where: ManufactureWhereUniqueInput
    /**
     * In case the Manufacture found by the `where` argument doesn't exist, create a new Manufacture with this data.
     */
    create: XOR<ManufactureCreateInput, ManufactureUncheckedCreateInput>
    /**
     * In case the Manufacture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ManufactureUpdateInput, ManufactureUncheckedUpdateInput>
  }

  /**
   * Manufacture delete
   */
  export type ManufactureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacture
     */
    select?: ManufactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufactureInclude<ExtArgs> | null
    /**
     * Filter which Manufacture to delete.
     */
    where: ManufactureWhereUniqueInput
  }

  /**
   * Manufacture deleteMany
   */
  export type ManufactureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Manufactures to delete
     */
    where?: ManufactureWhereInput
  }

  /**
   * Manufacture.cars
   */
  export type Manufacture$carsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    where?: carsWhereInput
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    cursor?: carsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }

  /**
   * Manufacture without action
   */
  export type ManufactureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacture
     */
    select?: ManufactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufactureInclude<ExtArgs> | null
  }


  /**
   * Model Model
   */

  export type AggregateModel = {
    _count: ModelCountAggregateOutputType | null
    _avg: ModelAvgAggregateOutputType | null
    _sum: ModelSumAggregateOutputType | null
    _min: ModelMinAggregateOutputType | null
    _max: ModelMaxAggregateOutputType | null
  }

  export type ModelAvgAggregateOutputType = {
    id: number | null
    year: number | null
  }

  export type ModelSumAggregateOutputType = {
    id: bigint | null
    year: number | null
  }

  export type ModelMinAggregateOutputType = {
    id: bigint | null
    type: string | null
    year: number | null
  }

  export type ModelMaxAggregateOutputType = {
    id: bigint | null
    type: string | null
    year: number | null
  }

  export type ModelCountAggregateOutputType = {
    id: number
    type: number
    year: number
    _all: number
  }


  export type ModelAvgAggregateInputType = {
    id?: true
    year?: true
  }

  export type ModelSumAggregateInputType = {
    id?: true
    year?: true
  }

  export type ModelMinAggregateInputType = {
    id?: true
    type?: true
    year?: true
  }

  export type ModelMaxAggregateInputType = {
    id?: true
    type?: true
    year?: true
  }

  export type ModelCountAggregateInputType = {
    id?: true
    type?: true
    year?: true
    _all?: true
  }

  export type ModelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Model to aggregate.
     */
    where?: ModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Models to fetch.
     */
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Models from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Models.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Models
    **/
    _count?: true | ModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ModelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ModelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ModelMaxAggregateInputType
  }

  export type GetModelAggregateType<T extends ModelAggregateArgs> = {
        [P in keyof T & keyof AggregateModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModel[P]>
      : GetScalarType<T[P], AggregateModel[P]>
  }




  export type ModelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ModelWhereInput
    orderBy?: ModelOrderByWithAggregationInput | ModelOrderByWithAggregationInput[]
    by: ModelScalarFieldEnum[] | ModelScalarFieldEnum
    having?: ModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ModelCountAggregateInputType | true
    _avg?: ModelAvgAggregateInputType
    _sum?: ModelSumAggregateInputType
    _min?: ModelMinAggregateInputType
    _max?: ModelMaxAggregateInputType
  }

  export type ModelGroupByOutputType = {
    id: bigint
    type: string
    year: number | null
    _count: ModelCountAggregateOutputType | null
    _avg: ModelAvgAggregateOutputType | null
    _sum: ModelSumAggregateOutputType | null
    _min: ModelMinAggregateOutputType | null
    _max: ModelMaxAggregateOutputType | null
  }

  type GetModelGroupByPayload<T extends ModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ModelGroupByOutputType[P]>
            : GetScalarType<T[P], ModelGroupByOutputType[P]>
        }
      >
    >


  export type ModelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    year?: boolean
    cars?: boolean | Model$carsArgs<ExtArgs>
    _count?: boolean | ModelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["model"]>

  export type ModelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    year?: boolean
  }, ExtArgs["result"]["model"]>

  export type ModelSelectScalar = {
    id?: boolean
    type?: boolean
    year?: boolean
  }

  export type ModelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | Model$carsArgs<ExtArgs>
    _count?: boolean | ModelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ModelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ModelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Model"
    objects: {
      cars: Prisma.$carsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      type: string
      year: number | null
    }, ExtArgs["result"]["model"]>
    composites: {}
  }

  type ModelGetPayload<S extends boolean | null | undefined | ModelDefaultArgs> = $Result.GetResult<Prisma.$ModelPayload, S>

  type ModelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ModelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ModelCountAggregateInputType | true
    }

  export interface ModelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Model'], meta: { name: 'Model' } }
    /**
     * Find zero or one Model that matches the filter.
     * @param {ModelFindUniqueArgs} args - Arguments to find a Model
     * @example
     * // Get one Model
     * const model = await prisma.model.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ModelFindUniqueArgs>(args: SelectSubset<T, ModelFindUniqueArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Model that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ModelFindUniqueOrThrowArgs} args - Arguments to find a Model
     * @example
     * // Get one Model
     * const model = await prisma.model.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ModelFindUniqueOrThrowArgs>(args: SelectSubset<T, ModelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Model that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelFindFirstArgs} args - Arguments to find a Model
     * @example
     * // Get one Model
     * const model = await prisma.model.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ModelFindFirstArgs>(args?: SelectSubset<T, ModelFindFirstArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Model that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelFindFirstOrThrowArgs} args - Arguments to find a Model
     * @example
     * // Get one Model
     * const model = await prisma.model.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ModelFindFirstOrThrowArgs>(args?: SelectSubset<T, ModelFindFirstOrThrowArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Models that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Models
     * const models = await prisma.model.findMany()
     * 
     * // Get first 10 Models
     * const models = await prisma.model.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const modelWithIdOnly = await prisma.model.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ModelFindManyArgs>(args?: SelectSubset<T, ModelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Model.
     * @param {ModelCreateArgs} args - Arguments to create a Model.
     * @example
     * // Create one Model
     * const Model = await prisma.model.create({
     *   data: {
     *     // ... data to create a Model
     *   }
     * })
     * 
     */
    create<T extends ModelCreateArgs>(args: SelectSubset<T, ModelCreateArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Models.
     * @param {ModelCreateManyArgs} args - Arguments to create many Models.
     * @example
     * // Create many Models
     * const model = await prisma.model.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ModelCreateManyArgs>(args?: SelectSubset<T, ModelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Models and returns the data saved in the database.
     * @param {ModelCreateManyAndReturnArgs} args - Arguments to create many Models.
     * @example
     * // Create many Models
     * const model = await prisma.model.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Models and only return the `id`
     * const modelWithIdOnly = await prisma.model.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ModelCreateManyAndReturnArgs>(args?: SelectSubset<T, ModelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Model.
     * @param {ModelDeleteArgs} args - Arguments to delete one Model.
     * @example
     * // Delete one Model
     * const Model = await prisma.model.delete({
     *   where: {
     *     // ... filter to delete one Model
     *   }
     * })
     * 
     */
    delete<T extends ModelDeleteArgs>(args: SelectSubset<T, ModelDeleteArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Model.
     * @param {ModelUpdateArgs} args - Arguments to update one Model.
     * @example
     * // Update one Model
     * const model = await prisma.model.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ModelUpdateArgs>(args: SelectSubset<T, ModelUpdateArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Models.
     * @param {ModelDeleteManyArgs} args - Arguments to filter Models to delete.
     * @example
     * // Delete a few Models
     * const { count } = await prisma.model.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ModelDeleteManyArgs>(args?: SelectSubset<T, ModelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Models.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Models
     * const model = await prisma.model.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ModelUpdateManyArgs>(args: SelectSubset<T, ModelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Model.
     * @param {ModelUpsertArgs} args - Arguments to update or create a Model.
     * @example
     * // Update or create a Model
     * const model = await prisma.model.upsert({
     *   create: {
     *     // ... data to create a Model
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Model we want to update
     *   }
     * })
     */
    upsert<T extends ModelUpsertArgs>(args: SelectSubset<T, ModelUpsertArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Models.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelCountArgs} args - Arguments to filter Models to count.
     * @example
     * // Count the number of Models
     * const count = await prisma.model.count({
     *   where: {
     *     // ... the filter for the Models we want to count
     *   }
     * })
    **/
    count<T extends ModelCountArgs>(
      args?: Subset<T, ModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Model.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModelAggregateArgs>(args: Subset<T, ModelAggregateArgs>): Prisma.PrismaPromise<GetModelAggregateType<T>>

    /**
     * Group by Model.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ModelGroupByArgs['orderBy'] }
        : { orderBy?: ModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Model model
   */
  readonly fields: ModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Model.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ModelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cars<T extends Model$carsArgs<ExtArgs> = {}>(args?: Subset<T, Model$carsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Model model
   */ 
  interface ModelFieldRefs {
    readonly id: FieldRef<"Model", 'BigInt'>
    readonly type: FieldRef<"Model", 'String'>
    readonly year: FieldRef<"Model", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Model findUnique
   */
  export type ModelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Model to fetch.
     */
    where: ModelWhereUniqueInput
  }

  /**
   * Model findUniqueOrThrow
   */
  export type ModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Model to fetch.
     */
    where: ModelWhereUniqueInput
  }

  /**
   * Model findFirst
   */
  export type ModelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Model to fetch.
     */
    where?: ModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Models to fetch.
     */
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Models.
     */
    cursor?: ModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Models from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Models.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Models.
     */
    distinct?: ModelScalarFieldEnum | ModelScalarFieldEnum[]
  }

  /**
   * Model findFirstOrThrow
   */
  export type ModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Model to fetch.
     */
    where?: ModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Models to fetch.
     */
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Models.
     */
    cursor?: ModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Models from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Models.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Models.
     */
    distinct?: ModelScalarFieldEnum | ModelScalarFieldEnum[]
  }

  /**
   * Model findMany
   */
  export type ModelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter, which Models to fetch.
     */
    where?: ModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Models to fetch.
     */
    orderBy?: ModelOrderByWithRelationInput | ModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Models.
     */
    cursor?: ModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Models from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Models.
     */
    skip?: number
    distinct?: ModelScalarFieldEnum | ModelScalarFieldEnum[]
  }

  /**
   * Model create
   */
  export type ModelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * The data needed to create a Model.
     */
    data: XOR<ModelCreateInput, ModelUncheckedCreateInput>
  }

  /**
   * Model createMany
   */
  export type ModelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Models.
     */
    data: ModelCreateManyInput | ModelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Model createManyAndReturn
   */
  export type ModelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Models.
     */
    data: ModelCreateManyInput | ModelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Model update
   */
  export type ModelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * The data needed to update a Model.
     */
    data: XOR<ModelUpdateInput, ModelUncheckedUpdateInput>
    /**
     * Choose, which Model to update.
     */
    where: ModelWhereUniqueInput
  }

  /**
   * Model updateMany
   */
  export type ModelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Models.
     */
    data: XOR<ModelUpdateManyMutationInput, ModelUncheckedUpdateManyInput>
    /**
     * Filter which Models to update
     */
    where?: ModelWhereInput
  }

  /**
   * Model upsert
   */
  export type ModelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * The filter to search for the Model to update in case it exists.
     */
    where: ModelWhereUniqueInput
    /**
     * In case the Model found by the `where` argument doesn't exist, create a new Model with this data.
     */
    create: XOR<ModelCreateInput, ModelUncheckedCreateInput>
    /**
     * In case the Model was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ModelUpdateInput, ModelUncheckedUpdateInput>
  }

  /**
   * Model delete
   */
  export type ModelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    /**
     * Filter which Model to delete.
     */
    where: ModelWhereUniqueInput
  }

  /**
   * Model deleteMany
   */
  export type ModelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Models to delete
     */
    where?: ModelWhereInput
  }

  /**
   * Model.cars
   */
  export type Model$carsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    where?: carsWhereInput
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    cursor?: carsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }

  /**
   * Model without action
   */
  export type ModelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
  }


  /**
   * Model Transmission
   */

  export type AggregateTransmission = {
    _count: TransmissionCountAggregateOutputType | null
    _avg: TransmissionAvgAggregateOutputType | null
    _sum: TransmissionSumAggregateOutputType | null
    _min: TransmissionMinAggregateOutputType | null
    _max: TransmissionMaxAggregateOutputType | null
  }

  export type TransmissionAvgAggregateOutputType = {
    id: number | null
    number_of_gears: number | null
  }

  export type TransmissionSumAggregateOutputType = {
    id: bigint | null
    number_of_gears: number | null
  }

  export type TransmissionMinAggregateOutputType = {
    id: bigint | null
    type: string | null
    number_of_gears: number | null
  }

  export type TransmissionMaxAggregateOutputType = {
    id: bigint | null
    type: string | null
    number_of_gears: number | null
  }

  export type TransmissionCountAggregateOutputType = {
    id: number
    type: number
    number_of_gears: number
    _all: number
  }


  export type TransmissionAvgAggregateInputType = {
    id?: true
    number_of_gears?: true
  }

  export type TransmissionSumAggregateInputType = {
    id?: true
    number_of_gears?: true
  }

  export type TransmissionMinAggregateInputType = {
    id?: true
    type?: true
    number_of_gears?: true
  }

  export type TransmissionMaxAggregateInputType = {
    id?: true
    type?: true
    number_of_gears?: true
  }

  export type TransmissionCountAggregateInputType = {
    id?: true
    type?: true
    number_of_gears?: true
    _all?: true
  }

  export type TransmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transmission to aggregate.
     */
    where?: TransmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transmissions to fetch.
     */
    orderBy?: TransmissionOrderByWithRelationInput | TransmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transmissions
    **/
    _count?: true | TransmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransmissionMaxAggregateInputType
  }

  export type GetTransmissionAggregateType<T extends TransmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransmission[P]>
      : GetScalarType<T[P], AggregateTransmission[P]>
  }




  export type TransmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransmissionWhereInput
    orderBy?: TransmissionOrderByWithAggregationInput | TransmissionOrderByWithAggregationInput[]
    by: TransmissionScalarFieldEnum[] | TransmissionScalarFieldEnum
    having?: TransmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransmissionCountAggregateInputType | true
    _avg?: TransmissionAvgAggregateInputType
    _sum?: TransmissionSumAggregateInputType
    _min?: TransmissionMinAggregateInputType
    _max?: TransmissionMaxAggregateInputType
  }

  export type TransmissionGroupByOutputType = {
    id: bigint
    type: string
    number_of_gears: number | null
    _count: TransmissionCountAggregateOutputType | null
    _avg: TransmissionAvgAggregateOutputType | null
    _sum: TransmissionSumAggregateOutputType | null
    _min: TransmissionMinAggregateOutputType | null
    _max: TransmissionMaxAggregateOutputType | null
  }

  type GetTransmissionGroupByPayload<T extends TransmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransmissionGroupByOutputType[P]>
            : GetScalarType<T[P], TransmissionGroupByOutputType[P]>
        }
      >
    >


  export type TransmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    number_of_gears?: boolean
    cars?: boolean | Transmission$carsArgs<ExtArgs>
    _count?: boolean | TransmissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transmission"]>

  export type TransmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    number_of_gears?: boolean
  }, ExtArgs["result"]["transmission"]>

  export type TransmissionSelectScalar = {
    id?: boolean
    type?: boolean
    number_of_gears?: boolean
  }

  export type TransmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | Transmission$carsArgs<ExtArgs>
    _count?: boolean | TransmissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TransmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TransmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transmission"
    objects: {
      cars: Prisma.$carsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      type: string
      number_of_gears: number | null
    }, ExtArgs["result"]["transmission"]>
    composites: {}
  }

  type TransmissionGetPayload<S extends boolean | null | undefined | TransmissionDefaultArgs> = $Result.GetResult<Prisma.$TransmissionPayload, S>

  type TransmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransmissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransmissionCountAggregateInputType | true
    }

  export interface TransmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transmission'], meta: { name: 'Transmission' } }
    /**
     * Find zero or one Transmission that matches the filter.
     * @param {TransmissionFindUniqueArgs} args - Arguments to find a Transmission
     * @example
     * // Get one Transmission
     * const transmission = await prisma.transmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransmissionFindUniqueArgs>(args: SelectSubset<T, TransmissionFindUniqueArgs<ExtArgs>>): Prisma__TransmissionClient<$Result.GetResult<Prisma.$TransmissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transmission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransmissionFindUniqueOrThrowArgs} args - Arguments to find a Transmission
     * @example
     * // Get one Transmission
     * const transmission = await prisma.transmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransmissionClient<$Result.GetResult<Prisma.$TransmissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissionFindFirstArgs} args - Arguments to find a Transmission
     * @example
     * // Get one Transmission
     * const transmission = await prisma.transmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransmissionFindFirstArgs>(args?: SelectSubset<T, TransmissionFindFirstArgs<ExtArgs>>): Prisma__TransmissionClient<$Result.GetResult<Prisma.$TransmissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissionFindFirstOrThrowArgs} args - Arguments to find a Transmission
     * @example
     * // Get one Transmission
     * const transmission = await prisma.transmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransmissionClient<$Result.GetResult<Prisma.$TransmissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transmissions
     * const transmissions = await prisma.transmission.findMany()
     * 
     * // Get first 10 Transmissions
     * const transmissions = await prisma.transmission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transmissionWithIdOnly = await prisma.transmission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransmissionFindManyArgs>(args?: SelectSubset<T, TransmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransmissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transmission.
     * @param {TransmissionCreateArgs} args - Arguments to create a Transmission.
     * @example
     * // Create one Transmission
     * const Transmission = await prisma.transmission.create({
     *   data: {
     *     // ... data to create a Transmission
     *   }
     * })
     * 
     */
    create<T extends TransmissionCreateArgs>(args: SelectSubset<T, TransmissionCreateArgs<ExtArgs>>): Prisma__TransmissionClient<$Result.GetResult<Prisma.$TransmissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transmissions.
     * @param {TransmissionCreateManyArgs} args - Arguments to create many Transmissions.
     * @example
     * // Create many Transmissions
     * const transmission = await prisma.transmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransmissionCreateManyArgs>(args?: SelectSubset<T, TransmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transmissions and returns the data saved in the database.
     * @param {TransmissionCreateManyAndReturnArgs} args - Arguments to create many Transmissions.
     * @example
     * // Create many Transmissions
     * const transmission = await prisma.transmission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transmissions and only return the `id`
     * const transmissionWithIdOnly = await prisma.transmission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransmissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transmission.
     * @param {TransmissionDeleteArgs} args - Arguments to delete one Transmission.
     * @example
     * // Delete one Transmission
     * const Transmission = await prisma.transmission.delete({
     *   where: {
     *     // ... filter to delete one Transmission
     *   }
     * })
     * 
     */
    delete<T extends TransmissionDeleteArgs>(args: SelectSubset<T, TransmissionDeleteArgs<ExtArgs>>): Prisma__TransmissionClient<$Result.GetResult<Prisma.$TransmissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transmission.
     * @param {TransmissionUpdateArgs} args - Arguments to update one Transmission.
     * @example
     * // Update one Transmission
     * const transmission = await prisma.transmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransmissionUpdateArgs>(args: SelectSubset<T, TransmissionUpdateArgs<ExtArgs>>): Prisma__TransmissionClient<$Result.GetResult<Prisma.$TransmissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transmissions.
     * @param {TransmissionDeleteManyArgs} args - Arguments to filter Transmissions to delete.
     * @example
     * // Delete a few Transmissions
     * const { count } = await prisma.transmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransmissionDeleteManyArgs>(args?: SelectSubset<T, TransmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transmissions
     * const transmission = await prisma.transmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransmissionUpdateManyArgs>(args: SelectSubset<T, TransmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transmission.
     * @param {TransmissionUpsertArgs} args - Arguments to update or create a Transmission.
     * @example
     * // Update or create a Transmission
     * const transmission = await prisma.transmission.upsert({
     *   create: {
     *     // ... data to create a Transmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transmission we want to update
     *   }
     * })
     */
    upsert<T extends TransmissionUpsertArgs>(args: SelectSubset<T, TransmissionUpsertArgs<ExtArgs>>): Prisma__TransmissionClient<$Result.GetResult<Prisma.$TransmissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissionCountArgs} args - Arguments to filter Transmissions to count.
     * @example
     * // Count the number of Transmissions
     * const count = await prisma.transmission.count({
     *   where: {
     *     // ... the filter for the Transmissions we want to count
     *   }
     * })
    **/
    count<T extends TransmissionCountArgs>(
      args?: Subset<T, TransmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransmissionAggregateArgs>(args: Subset<T, TransmissionAggregateArgs>): Prisma.PrismaPromise<GetTransmissionAggregateType<T>>

    /**
     * Group by Transmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransmissionGroupByArgs['orderBy'] }
        : { orderBy?: TransmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transmission model
   */
  readonly fields: TransmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cars<T extends Transmission$carsArgs<ExtArgs> = {}>(args?: Subset<T, Transmission$carsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transmission model
   */ 
  interface TransmissionFieldRefs {
    readonly id: FieldRef<"Transmission", 'BigInt'>
    readonly type: FieldRef<"Transmission", 'String'>
    readonly number_of_gears: FieldRef<"Transmission", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Transmission findUnique
   */
  export type TransmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transmission
     */
    select?: TransmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransmissionInclude<ExtArgs> | null
    /**
     * Filter, which Transmission to fetch.
     */
    where: TransmissionWhereUniqueInput
  }

  /**
   * Transmission findUniqueOrThrow
   */
  export type TransmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transmission
     */
    select?: TransmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransmissionInclude<ExtArgs> | null
    /**
     * Filter, which Transmission to fetch.
     */
    where: TransmissionWhereUniqueInput
  }

  /**
   * Transmission findFirst
   */
  export type TransmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transmission
     */
    select?: TransmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransmissionInclude<ExtArgs> | null
    /**
     * Filter, which Transmission to fetch.
     */
    where?: TransmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transmissions to fetch.
     */
    orderBy?: TransmissionOrderByWithRelationInput | TransmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transmissions.
     */
    cursor?: TransmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transmissions.
     */
    distinct?: TransmissionScalarFieldEnum | TransmissionScalarFieldEnum[]
  }

  /**
   * Transmission findFirstOrThrow
   */
  export type TransmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transmission
     */
    select?: TransmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransmissionInclude<ExtArgs> | null
    /**
     * Filter, which Transmission to fetch.
     */
    where?: TransmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transmissions to fetch.
     */
    orderBy?: TransmissionOrderByWithRelationInput | TransmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transmissions.
     */
    cursor?: TransmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transmissions.
     */
    distinct?: TransmissionScalarFieldEnum | TransmissionScalarFieldEnum[]
  }

  /**
   * Transmission findMany
   */
  export type TransmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transmission
     */
    select?: TransmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransmissionInclude<ExtArgs> | null
    /**
     * Filter, which Transmissions to fetch.
     */
    where?: TransmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transmissions to fetch.
     */
    orderBy?: TransmissionOrderByWithRelationInput | TransmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transmissions.
     */
    cursor?: TransmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transmissions.
     */
    skip?: number
    distinct?: TransmissionScalarFieldEnum | TransmissionScalarFieldEnum[]
  }

  /**
   * Transmission create
   */
  export type TransmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transmission
     */
    select?: TransmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transmission.
     */
    data: XOR<TransmissionCreateInput, TransmissionUncheckedCreateInput>
  }

  /**
   * Transmission createMany
   */
  export type TransmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transmissions.
     */
    data: TransmissionCreateManyInput | TransmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transmission createManyAndReturn
   */
  export type TransmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transmission
     */
    select?: TransmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Transmissions.
     */
    data: TransmissionCreateManyInput | TransmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transmission update
   */
  export type TransmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transmission
     */
    select?: TransmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transmission.
     */
    data: XOR<TransmissionUpdateInput, TransmissionUncheckedUpdateInput>
    /**
     * Choose, which Transmission to update.
     */
    where: TransmissionWhereUniqueInput
  }

  /**
   * Transmission updateMany
   */
  export type TransmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transmissions.
     */
    data: XOR<TransmissionUpdateManyMutationInput, TransmissionUncheckedUpdateManyInput>
    /**
     * Filter which Transmissions to update
     */
    where?: TransmissionWhereInput
  }

  /**
   * Transmission upsert
   */
  export type TransmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transmission
     */
    select?: TransmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transmission to update in case it exists.
     */
    where: TransmissionWhereUniqueInput
    /**
     * In case the Transmission found by the `where` argument doesn't exist, create a new Transmission with this data.
     */
    create: XOR<TransmissionCreateInput, TransmissionUncheckedCreateInput>
    /**
     * In case the Transmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransmissionUpdateInput, TransmissionUncheckedUpdateInput>
  }

  /**
   * Transmission delete
   */
  export type TransmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transmission
     */
    select?: TransmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransmissionInclude<ExtArgs> | null
    /**
     * Filter which Transmission to delete.
     */
    where: TransmissionWhereUniqueInput
  }

  /**
   * Transmission deleteMany
   */
  export type TransmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transmissions to delete
     */
    where?: TransmissionWhereInput
  }

  /**
   * Transmission.cars
   */
  export type Transmission$carsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    where?: carsWhereInput
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    cursor?: carsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }

  /**
   * Transmission without action
   */
  export type TransmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transmission
     */
    select?: TransmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransmissionInclude<ExtArgs> | null
  }


  /**
   * Model Type
   */

  export type AggregateType = {
    _count: TypeCountAggregateOutputType | null
    _avg: TypeAvgAggregateOutputType | null
    _sum: TypeSumAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  export type TypeAvgAggregateOutputType = {
    id: number | null
  }

  export type TypeSumAggregateOutputType = {
    id: bigint | null
  }

  export type TypeMinAggregateOutputType = {
    id: bigint | null
    type: string | null
    description: string | null
  }

  export type TypeMaxAggregateOutputType = {
    id: bigint | null
    type: string | null
    description: string | null
  }

  export type TypeCountAggregateOutputType = {
    id: number
    type: number
    description: number
    _all: number
  }


  export type TypeAvgAggregateInputType = {
    id?: true
  }

  export type TypeSumAggregateInputType = {
    id?: true
  }

  export type TypeMinAggregateInputType = {
    id?: true
    type?: true
    description?: true
  }

  export type TypeMaxAggregateInputType = {
    id?: true
    type?: true
    description?: true
  }

  export type TypeCountAggregateInputType = {
    id?: true
    type?: true
    description?: true
    _all?: true
  }

  export type TypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Type to aggregate.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Types
    **/
    _count?: true | TypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypeMaxAggregateInputType
  }

  export type GetTypeAggregateType<T extends TypeAggregateArgs> = {
        [P in keyof T & keyof AggregateType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateType[P]>
      : GetScalarType<T[P], AggregateType[P]>
  }




  export type TypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TypeWhereInput
    orderBy?: TypeOrderByWithAggregationInput | TypeOrderByWithAggregationInput[]
    by: TypeScalarFieldEnum[] | TypeScalarFieldEnum
    having?: TypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypeCountAggregateInputType | true
    _avg?: TypeAvgAggregateInputType
    _sum?: TypeSumAggregateInputType
    _min?: TypeMinAggregateInputType
    _max?: TypeMaxAggregateInputType
  }

  export type TypeGroupByOutputType = {
    id: bigint
    type: string
    description: string | null
    _count: TypeCountAggregateOutputType | null
    _avg: TypeAvgAggregateOutputType | null
    _sum: TypeSumAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  type GetTypeGroupByPayload<T extends TypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypeGroupByOutputType[P]>
            : GetScalarType<T[P], TypeGroupByOutputType[P]>
        }
      >
    >


  export type TypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    description?: boolean
    cars?: boolean | Type$carsArgs<ExtArgs>
    _count?: boolean | TypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["type"]>

  export type TypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    description?: boolean
  }, ExtArgs["result"]["type"]>

  export type TypeSelectScalar = {
    id?: boolean
    type?: boolean
    description?: boolean
  }

  export type TypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cars?: boolean | Type$carsArgs<ExtArgs>
    _count?: boolean | TypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Type"
    objects: {
      cars: Prisma.$carsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      type: string
      description: string | null
    }, ExtArgs["result"]["type"]>
    composites: {}
  }

  type TypeGetPayload<S extends boolean | null | undefined | TypeDefaultArgs> = $Result.GetResult<Prisma.$TypePayload, S>

  type TypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TypeCountAggregateInputType | true
    }

  export interface TypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Type'], meta: { name: 'Type' } }
    /**
     * Find zero or one Type that matches the filter.
     * @param {TypeFindUniqueArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TypeFindUniqueArgs>(args: SelectSubset<T, TypeFindUniqueArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Type that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TypeFindUniqueOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TypeFindUniqueOrThrowArgs>(args: SelectSubset<T, TypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TypeFindFirstArgs>(args?: SelectSubset<T, TypeFindFirstArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Type that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TypeFindFirstOrThrowArgs>(args?: SelectSubset<T, TypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Types
     * const types = await prisma.type.findMany()
     * 
     * // Get first 10 Types
     * const types = await prisma.type.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const typeWithIdOnly = await prisma.type.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TypeFindManyArgs>(args?: SelectSubset<T, TypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Type.
     * @param {TypeCreateArgs} args - Arguments to create a Type.
     * @example
     * // Create one Type
     * const Type = await prisma.type.create({
     *   data: {
     *     // ... data to create a Type
     *   }
     * })
     * 
     */
    create<T extends TypeCreateArgs>(args: SelectSubset<T, TypeCreateArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Types.
     * @param {TypeCreateManyArgs} args - Arguments to create many Types.
     * @example
     * // Create many Types
     * const type = await prisma.type.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TypeCreateManyArgs>(args?: SelectSubset<T, TypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Types and returns the data saved in the database.
     * @param {TypeCreateManyAndReturnArgs} args - Arguments to create many Types.
     * @example
     * // Create many Types
     * const type = await prisma.type.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Types and only return the `id`
     * const typeWithIdOnly = await prisma.type.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TypeCreateManyAndReturnArgs>(args?: SelectSubset<T, TypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Type.
     * @param {TypeDeleteArgs} args - Arguments to delete one Type.
     * @example
     * // Delete one Type
     * const Type = await prisma.type.delete({
     *   where: {
     *     // ... filter to delete one Type
     *   }
     * })
     * 
     */
    delete<T extends TypeDeleteArgs>(args: SelectSubset<T, TypeDeleteArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Type.
     * @param {TypeUpdateArgs} args - Arguments to update one Type.
     * @example
     * // Update one Type
     * const type = await prisma.type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TypeUpdateArgs>(args: SelectSubset<T, TypeUpdateArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Types.
     * @param {TypeDeleteManyArgs} args - Arguments to filter Types to delete.
     * @example
     * // Delete a few Types
     * const { count } = await prisma.type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TypeDeleteManyArgs>(args?: SelectSubset<T, TypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Types
     * const type = await prisma.type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TypeUpdateManyArgs>(args: SelectSubset<T, TypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Type.
     * @param {TypeUpsertArgs} args - Arguments to update or create a Type.
     * @example
     * // Update or create a Type
     * const type = await prisma.type.upsert({
     *   create: {
     *     // ... data to create a Type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Type we want to update
     *   }
     * })
     */
    upsert<T extends TypeUpsertArgs>(args: SelectSubset<T, TypeUpsertArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeCountArgs} args - Arguments to filter Types to count.
     * @example
     * // Count the number of Types
     * const count = await prisma.type.count({
     *   where: {
     *     // ... the filter for the Types we want to count
     *   }
     * })
    **/
    count<T extends TypeCountArgs>(
      args?: Subset<T, TypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypeAggregateArgs>(args: Subset<T, TypeAggregateArgs>): Prisma.PrismaPromise<GetTypeAggregateType<T>>

    /**
     * Group by Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypeGroupByArgs['orderBy'] }
        : { orderBy?: TypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Type model
   */
  readonly fields: TypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cars<T extends Type$carsArgs<ExtArgs> = {}>(args?: Subset<T, Type$carsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Type model
   */ 
  interface TypeFieldRefs {
    readonly id: FieldRef<"Type", 'BigInt'>
    readonly type: FieldRef<"Type", 'String'>
    readonly description: FieldRef<"Type", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Type findUnique
   */
  export type TypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }

  /**
   * Type findUniqueOrThrow
   */
  export type TypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }

  /**
   * Type findFirst
   */
  export type TypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: TypeScalarFieldEnum | TypeScalarFieldEnum[]
  }

  /**
   * Type findFirstOrThrow
   */
  export type TypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: TypeScalarFieldEnum | TypeScalarFieldEnum[]
  }

  /**
   * Type findMany
   */
  export type TypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Types to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    distinct?: TypeScalarFieldEnum | TypeScalarFieldEnum[]
  }

  /**
   * Type create
   */
  export type TypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * The data needed to create a Type.
     */
    data: XOR<TypeCreateInput, TypeUncheckedCreateInput>
  }

  /**
   * Type createMany
   */
  export type TypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Types.
     */
    data: TypeCreateManyInput | TypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Type createManyAndReturn
   */
  export type TypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Types.
     */
    data: TypeCreateManyInput | TypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Type update
   */
  export type TypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * The data needed to update a Type.
     */
    data: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
    /**
     * Choose, which Type to update.
     */
    where: TypeWhereUniqueInput
  }

  /**
   * Type updateMany
   */
  export type TypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Types.
     */
    data: XOR<TypeUpdateManyMutationInput, TypeUncheckedUpdateManyInput>
    /**
     * Filter which Types to update
     */
    where?: TypeWhereInput
  }

  /**
   * Type upsert
   */
  export type TypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * The filter to search for the Type to update in case it exists.
     */
    where: TypeWhereUniqueInput
    /**
     * In case the Type found by the `where` argument doesn't exist, create a new Type with this data.
     */
    create: XOR<TypeCreateInput, TypeUncheckedCreateInput>
    /**
     * In case the Type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
  }

  /**
   * Type delete
   */
  export type TypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter which Type to delete.
     */
    where: TypeWhereUniqueInput
  }

  /**
   * Type deleteMany
   */
  export type TypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Types to delete
     */
    where?: TypeWhereInput
  }

  /**
   * Type.cars
   */
  export type Type$carsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    where?: carsWhereInput
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    cursor?: carsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }

  /**
   * Type without action
   */
  export type TypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeInclude<ExtArgs> | null
  }


  /**
   * Model cars
   */

  export type AggregateCars = {
    _count: CarsCountAggregateOutputType | null
    _avg: CarsAvgAggregateOutputType | null
    _sum: CarsSumAggregateOutputType | null
    _min: CarsMinAggregateOutputType | null
    _max: CarsMaxAggregateOutputType | null
  }

  export type CarsAvgAggregateOutputType = {
    id: number | null
    manufacture_id: number | null
    model_id: number | null
    rentPerDay: number | null
    capacity: number | null
    transmission_id: number | null
    type_id: number | null
    year: number | null
    fuel_id: number | null
  }

  export type CarsSumAggregateOutputType = {
    id: number | null
    manufacture_id: bigint | null
    model_id: bigint | null
    rentPerDay: number | null
    capacity: number | null
    transmission_id: bigint | null
    type_id: bigint | null
    year: number | null
    fuel_id: bigint | null
  }

  export type CarsMinAggregateOutputType = {
    id: number | null
    plate: string | null
    manufacture_id: bigint | null
    model_id: bigint | null
    image: string | null
    rentPerDay: number | null
    capacity: number | null
    description: string | null
    availableAt: string | null
    transmission_id: bigint | null
    available: boolean | null
    type_id: bigint | null
    year: number | null
    fuel_id: bigint | null
  }

  export type CarsMaxAggregateOutputType = {
    id: number | null
    plate: string | null
    manufacture_id: bigint | null
    model_id: bigint | null
    image: string | null
    rentPerDay: number | null
    capacity: number | null
    description: string | null
    availableAt: string | null
    transmission_id: bigint | null
    available: boolean | null
    type_id: bigint | null
    year: number | null
    fuel_id: bigint | null
  }

  export type CarsCountAggregateOutputType = {
    id: number
    plate: number
    manufacture_id: number
    model_id: number
    image: number
    rentPerDay: number
    capacity: number
    description: number
    availableAt: number
    transmission_id: number
    available: number
    type_id: number
    year: number
    options: number
    specs: number
    fuel_id: number
    _all: number
  }


  export type CarsAvgAggregateInputType = {
    id?: true
    manufacture_id?: true
    model_id?: true
    rentPerDay?: true
    capacity?: true
    transmission_id?: true
    type_id?: true
    year?: true
    fuel_id?: true
  }

  export type CarsSumAggregateInputType = {
    id?: true
    manufacture_id?: true
    model_id?: true
    rentPerDay?: true
    capacity?: true
    transmission_id?: true
    type_id?: true
    year?: true
    fuel_id?: true
  }

  export type CarsMinAggregateInputType = {
    id?: true
    plate?: true
    manufacture_id?: true
    model_id?: true
    image?: true
    rentPerDay?: true
    capacity?: true
    description?: true
    availableAt?: true
    transmission_id?: true
    available?: true
    type_id?: true
    year?: true
    fuel_id?: true
  }

  export type CarsMaxAggregateInputType = {
    id?: true
    plate?: true
    manufacture_id?: true
    model_id?: true
    image?: true
    rentPerDay?: true
    capacity?: true
    description?: true
    availableAt?: true
    transmission_id?: true
    available?: true
    type_id?: true
    year?: true
    fuel_id?: true
  }

  export type CarsCountAggregateInputType = {
    id?: true
    plate?: true
    manufacture_id?: true
    model_id?: true
    image?: true
    rentPerDay?: true
    capacity?: true
    description?: true
    availableAt?: true
    transmission_id?: true
    available?: true
    type_id?: true
    year?: true
    options?: true
    specs?: true
    fuel_id?: true
    _all?: true
  }

  export type CarsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cars to aggregate.
     */
    where?: carsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cars to fetch.
     */
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: carsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cars
    **/
    _count?: true | CarsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarsMaxAggregateInputType
  }

  export type GetCarsAggregateType<T extends CarsAggregateArgs> = {
        [P in keyof T & keyof AggregateCars]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCars[P]>
      : GetScalarType<T[P], AggregateCars[P]>
  }




  export type carsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: carsWhereInput
    orderBy?: carsOrderByWithAggregationInput | carsOrderByWithAggregationInput[]
    by: CarsScalarFieldEnum[] | CarsScalarFieldEnum
    having?: carsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarsCountAggregateInputType | true
    _avg?: CarsAvgAggregateInputType
    _sum?: CarsSumAggregateInputType
    _min?: CarsMinAggregateInputType
    _max?: CarsMaxAggregateInputType
  }

  export type CarsGroupByOutputType = {
    id: number
    plate: string
    manufacture_id: bigint | null
    model_id: bigint | null
    image: string | null
    rentPerDay: number
    capacity: number
    description: string | null
    availableAt: string
    transmission_id: bigint | null
    available: boolean
    type_id: bigint | null
    year: number
    options: JsonValue | null
    specs: JsonValue | null
    fuel_id: bigint | null
    _count: CarsCountAggregateOutputType | null
    _avg: CarsAvgAggregateOutputType | null
    _sum: CarsSumAggregateOutputType | null
    _min: CarsMinAggregateOutputType | null
    _max: CarsMaxAggregateOutputType | null
  }

  type GetCarsGroupByPayload<T extends carsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarsGroupByOutputType[P]>
            : GetScalarType<T[P], CarsGroupByOutputType[P]>
        }
      >
    >


  export type carsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plate?: boolean
    manufacture_id?: boolean
    model_id?: boolean
    image?: boolean
    rentPerDay?: boolean
    capacity?: boolean
    description?: boolean
    availableAt?: boolean
    transmission_id?: boolean
    available?: boolean
    type_id?: boolean
    year?: boolean
    options?: boolean
    specs?: boolean
    fuel_id?: boolean
    Fuel?: boolean | cars$FuelArgs<ExtArgs>
    Manufacture?: boolean | cars$ManufactureArgs<ExtArgs>
    Model?: boolean | cars$ModelArgs<ExtArgs>
    Transmission?: boolean | cars$TransmissionArgs<ExtArgs>
    Type?: boolean | cars$TypeArgs<ExtArgs>
  }, ExtArgs["result"]["cars"]>

  export type carsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plate?: boolean
    manufacture_id?: boolean
    model_id?: boolean
    image?: boolean
    rentPerDay?: boolean
    capacity?: boolean
    description?: boolean
    availableAt?: boolean
    transmission_id?: boolean
    available?: boolean
    type_id?: boolean
    year?: boolean
    options?: boolean
    specs?: boolean
    fuel_id?: boolean
    Fuel?: boolean | cars$FuelArgs<ExtArgs>
    Manufacture?: boolean | cars$ManufactureArgs<ExtArgs>
    Model?: boolean | cars$ModelArgs<ExtArgs>
    Transmission?: boolean | cars$TransmissionArgs<ExtArgs>
    Type?: boolean | cars$TypeArgs<ExtArgs>
  }, ExtArgs["result"]["cars"]>

  export type carsSelectScalar = {
    id?: boolean
    plate?: boolean
    manufacture_id?: boolean
    model_id?: boolean
    image?: boolean
    rentPerDay?: boolean
    capacity?: boolean
    description?: boolean
    availableAt?: boolean
    transmission_id?: boolean
    available?: boolean
    type_id?: boolean
    year?: boolean
    options?: boolean
    specs?: boolean
    fuel_id?: boolean
  }

  export type carsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Fuel?: boolean | cars$FuelArgs<ExtArgs>
    Manufacture?: boolean | cars$ManufactureArgs<ExtArgs>
    Model?: boolean | cars$ModelArgs<ExtArgs>
    Transmission?: boolean | cars$TransmissionArgs<ExtArgs>
    Type?: boolean | cars$TypeArgs<ExtArgs>
  }
  export type carsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Fuel?: boolean | cars$FuelArgs<ExtArgs>
    Manufacture?: boolean | cars$ManufactureArgs<ExtArgs>
    Model?: boolean | cars$ModelArgs<ExtArgs>
    Transmission?: boolean | cars$TransmissionArgs<ExtArgs>
    Type?: boolean | cars$TypeArgs<ExtArgs>
  }

  export type $carsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cars"
    objects: {
      Fuel: Prisma.$FuelPayload<ExtArgs> | null
      Manufacture: Prisma.$ManufacturePayload<ExtArgs> | null
      Model: Prisma.$ModelPayload<ExtArgs> | null
      Transmission: Prisma.$TransmissionPayload<ExtArgs> | null
      Type: Prisma.$TypePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      plate: string
      manufacture_id: bigint | null
      model_id: bigint | null
      image: string | null
      rentPerDay: number
      capacity: number
      description: string | null
      availableAt: string
      transmission_id: bigint | null
      available: boolean
      type_id: bigint | null
      year: number
      options: Prisma.JsonValue | null
      specs: Prisma.JsonValue | null
      fuel_id: bigint | null
    }, ExtArgs["result"]["cars"]>
    composites: {}
  }

  type carsGetPayload<S extends boolean | null | undefined | carsDefaultArgs> = $Result.GetResult<Prisma.$carsPayload, S>

  type carsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<carsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CarsCountAggregateInputType | true
    }

  export interface carsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cars'], meta: { name: 'cars' } }
    /**
     * Find zero or one Cars that matches the filter.
     * @param {carsFindUniqueArgs} args - Arguments to find a Cars
     * @example
     * // Get one Cars
     * const cars = await prisma.cars.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends carsFindUniqueArgs>(args: SelectSubset<T, carsFindUniqueArgs<ExtArgs>>): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cars that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {carsFindUniqueOrThrowArgs} args - Arguments to find a Cars
     * @example
     * // Get one Cars
     * const cars = await prisma.cars.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends carsFindUniqueOrThrowArgs>(args: SelectSubset<T, carsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carsFindFirstArgs} args - Arguments to find a Cars
     * @example
     * // Get one Cars
     * const cars = await prisma.cars.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends carsFindFirstArgs>(args?: SelectSubset<T, carsFindFirstArgs<ExtArgs>>): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cars that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carsFindFirstOrThrowArgs} args - Arguments to find a Cars
     * @example
     * // Get one Cars
     * const cars = await prisma.cars.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends carsFindFirstOrThrowArgs>(args?: SelectSubset<T, carsFindFirstOrThrowArgs<ExtArgs>>): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cars
     * const cars = await prisma.cars.findMany()
     * 
     * // Get first 10 Cars
     * const cars = await prisma.cars.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carsWithIdOnly = await prisma.cars.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends carsFindManyArgs>(args?: SelectSubset<T, carsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cars.
     * @param {carsCreateArgs} args - Arguments to create a Cars.
     * @example
     * // Create one Cars
     * const Cars = await prisma.cars.create({
     *   data: {
     *     // ... data to create a Cars
     *   }
     * })
     * 
     */
    create<T extends carsCreateArgs>(args: SelectSubset<T, carsCreateArgs<ExtArgs>>): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cars.
     * @param {carsCreateManyArgs} args - Arguments to create many Cars.
     * @example
     * // Create many Cars
     * const cars = await prisma.cars.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends carsCreateManyArgs>(args?: SelectSubset<T, carsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cars and returns the data saved in the database.
     * @param {carsCreateManyAndReturnArgs} args - Arguments to create many Cars.
     * @example
     * // Create many Cars
     * const cars = await prisma.cars.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cars and only return the `id`
     * const carsWithIdOnly = await prisma.cars.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends carsCreateManyAndReturnArgs>(args?: SelectSubset<T, carsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Cars.
     * @param {carsDeleteArgs} args - Arguments to delete one Cars.
     * @example
     * // Delete one Cars
     * const Cars = await prisma.cars.delete({
     *   where: {
     *     // ... filter to delete one Cars
     *   }
     * })
     * 
     */
    delete<T extends carsDeleteArgs>(args: SelectSubset<T, carsDeleteArgs<ExtArgs>>): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cars.
     * @param {carsUpdateArgs} args - Arguments to update one Cars.
     * @example
     * // Update one Cars
     * const cars = await prisma.cars.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends carsUpdateArgs>(args: SelectSubset<T, carsUpdateArgs<ExtArgs>>): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cars.
     * @param {carsDeleteManyArgs} args - Arguments to filter Cars to delete.
     * @example
     * // Delete a few Cars
     * const { count } = await prisma.cars.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends carsDeleteManyArgs>(args?: SelectSubset<T, carsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cars
     * const cars = await prisma.cars.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends carsUpdateManyArgs>(args: SelectSubset<T, carsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cars.
     * @param {carsUpsertArgs} args - Arguments to update or create a Cars.
     * @example
     * // Update or create a Cars
     * const cars = await prisma.cars.upsert({
     *   create: {
     *     // ... data to create a Cars
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cars we want to update
     *   }
     * })
     */
    upsert<T extends carsUpsertArgs>(args: SelectSubset<T, carsUpsertArgs<ExtArgs>>): Prisma__carsClient<$Result.GetResult<Prisma.$carsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carsCountArgs} args - Arguments to filter Cars to count.
     * @example
     * // Count the number of Cars
     * const count = await prisma.cars.count({
     *   where: {
     *     // ... the filter for the Cars we want to count
     *   }
     * })
    **/
    count<T extends carsCountArgs>(
      args?: Subset<T, carsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarsAggregateArgs>(args: Subset<T, CarsAggregateArgs>): Prisma.PrismaPromise<GetCarsAggregateType<T>>

    /**
     * Group by Cars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {carsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends carsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: carsGroupByArgs['orderBy'] }
        : { orderBy?: carsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, carsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cars model
   */
  readonly fields: carsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cars.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__carsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Fuel<T extends cars$FuelArgs<ExtArgs> = {}>(args?: Subset<T, cars$FuelArgs<ExtArgs>>): Prisma__FuelClient<$Result.GetResult<Prisma.$FuelPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Manufacture<T extends cars$ManufactureArgs<ExtArgs> = {}>(args?: Subset<T, cars$ManufactureArgs<ExtArgs>>): Prisma__ManufactureClient<$Result.GetResult<Prisma.$ManufacturePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Model<T extends cars$ModelArgs<ExtArgs> = {}>(args?: Subset<T, cars$ModelArgs<ExtArgs>>): Prisma__ModelClient<$Result.GetResult<Prisma.$ModelPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Transmission<T extends cars$TransmissionArgs<ExtArgs> = {}>(args?: Subset<T, cars$TransmissionArgs<ExtArgs>>): Prisma__TransmissionClient<$Result.GetResult<Prisma.$TransmissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Type<T extends cars$TypeArgs<ExtArgs> = {}>(args?: Subset<T, cars$TypeArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cars model
   */ 
  interface carsFieldRefs {
    readonly id: FieldRef<"cars", 'Int'>
    readonly plate: FieldRef<"cars", 'String'>
    readonly manufacture_id: FieldRef<"cars", 'BigInt'>
    readonly model_id: FieldRef<"cars", 'BigInt'>
    readonly image: FieldRef<"cars", 'String'>
    readonly rentPerDay: FieldRef<"cars", 'Int'>
    readonly capacity: FieldRef<"cars", 'Int'>
    readonly description: FieldRef<"cars", 'String'>
    readonly availableAt: FieldRef<"cars", 'String'>
    readonly transmission_id: FieldRef<"cars", 'BigInt'>
    readonly available: FieldRef<"cars", 'Boolean'>
    readonly type_id: FieldRef<"cars", 'BigInt'>
    readonly year: FieldRef<"cars", 'Int'>
    readonly options: FieldRef<"cars", 'Json'>
    readonly specs: FieldRef<"cars", 'Json'>
    readonly fuel_id: FieldRef<"cars", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * cars findUnique
   */
  export type carsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * Filter, which cars to fetch.
     */
    where: carsWhereUniqueInput
  }

  /**
   * cars findUniqueOrThrow
   */
  export type carsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * Filter, which cars to fetch.
     */
    where: carsWhereUniqueInput
  }

  /**
   * cars findFirst
   */
  export type carsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * Filter, which cars to fetch.
     */
    where?: carsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cars to fetch.
     */
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cars.
     */
    cursor?: carsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cars.
     */
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }

  /**
   * cars findFirstOrThrow
   */
  export type carsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * Filter, which cars to fetch.
     */
    where?: carsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cars to fetch.
     */
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cars.
     */
    cursor?: carsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cars.
     */
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }

  /**
   * cars findMany
   */
  export type carsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * Filter, which cars to fetch.
     */
    where?: carsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cars to fetch.
     */
    orderBy?: carsOrderByWithRelationInput | carsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cars.
     */
    cursor?: carsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cars.
     */
    skip?: number
    distinct?: CarsScalarFieldEnum | CarsScalarFieldEnum[]
  }

  /**
   * cars create
   */
  export type carsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * The data needed to create a cars.
     */
    data: XOR<carsCreateInput, carsUncheckedCreateInput>
  }

  /**
   * cars createMany
   */
  export type carsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cars.
     */
    data: carsCreateManyInput | carsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cars createManyAndReturn
   */
  export type carsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many cars.
     */
    data: carsCreateManyInput | carsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * cars update
   */
  export type carsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * The data needed to update a cars.
     */
    data: XOR<carsUpdateInput, carsUncheckedUpdateInput>
    /**
     * Choose, which cars to update.
     */
    where: carsWhereUniqueInput
  }

  /**
   * cars updateMany
   */
  export type carsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cars.
     */
    data: XOR<carsUpdateManyMutationInput, carsUncheckedUpdateManyInput>
    /**
     * Filter which cars to update
     */
    where?: carsWhereInput
  }

  /**
   * cars upsert
   */
  export type carsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * The filter to search for the cars to update in case it exists.
     */
    where: carsWhereUniqueInput
    /**
     * In case the cars found by the `where` argument doesn't exist, create a new cars with this data.
     */
    create: XOR<carsCreateInput, carsUncheckedCreateInput>
    /**
     * In case the cars was found with the provided `where` argument, update it with this data.
     */
    update: XOR<carsUpdateInput, carsUncheckedUpdateInput>
  }

  /**
   * cars delete
   */
  export type carsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
    /**
     * Filter which cars to delete.
     */
    where: carsWhereUniqueInput
  }

  /**
   * cars deleteMany
   */
  export type carsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cars to delete
     */
    where?: carsWhereInput
  }

  /**
   * cars.Fuel
   */
  export type cars$FuelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fuel
     */
    select?: FuelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuelInclude<ExtArgs> | null
    where?: FuelWhereInput
  }

  /**
   * cars.Manufacture
   */
  export type cars$ManufactureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manufacture
     */
    select?: ManufactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManufactureInclude<ExtArgs> | null
    where?: ManufactureWhereInput
  }

  /**
   * cars.Model
   */
  export type cars$ModelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Model
     */
    select?: ModelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ModelInclude<ExtArgs> | null
    where?: ModelWhereInput
  }

  /**
   * cars.Transmission
   */
  export type cars$TransmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transmission
     */
    select?: TransmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransmissionInclude<ExtArgs> | null
    where?: TransmissionWhereInput
  }

  /**
   * cars.Type
   */
  export type cars$TypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeInclude<ExtArgs> | null
    where?: TypeWhereInput
  }

  /**
   * cars without action
   */
  export type carsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cars
     */
    select?: carsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: carsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FuelScalarFieldEnum: {
    id: 'id',
    type: 'type',
    price: 'price',
    octan_rating: 'octan_rating'
  };

  export type FuelScalarFieldEnum = (typeof FuelScalarFieldEnum)[keyof typeof FuelScalarFieldEnum]


  export const ManufactureScalarFieldEnum: {
    id: 'id',
    manufacture: 'manufacture',
    address: 'address'
  };

  export type ManufactureScalarFieldEnum = (typeof ManufactureScalarFieldEnum)[keyof typeof ManufactureScalarFieldEnum]


  export const ModelScalarFieldEnum: {
    id: 'id',
    type: 'type',
    year: 'year'
  };

  export type ModelScalarFieldEnum = (typeof ModelScalarFieldEnum)[keyof typeof ModelScalarFieldEnum]


  export const TransmissionScalarFieldEnum: {
    id: 'id',
    type: 'type',
    number_of_gears: 'number_of_gears'
  };

  export type TransmissionScalarFieldEnum = (typeof TransmissionScalarFieldEnum)[keyof typeof TransmissionScalarFieldEnum]


  export const TypeScalarFieldEnum: {
    id: 'id',
    type: 'type',
    description: 'description'
  };

  export type TypeScalarFieldEnum = (typeof TypeScalarFieldEnum)[keyof typeof TypeScalarFieldEnum]


  export const CarsScalarFieldEnum: {
    id: 'id',
    plate: 'plate',
    manufacture_id: 'manufacture_id',
    model_id: 'model_id',
    image: 'image',
    rentPerDay: 'rentPerDay',
    capacity: 'capacity',
    description: 'description',
    availableAt: 'availableAt',
    transmission_id: 'transmission_id',
    available: 'available',
    type_id: 'type_id',
    year: 'year',
    options: 'options',
    specs: 'specs',
    fuel_id: 'fuel_id'
  };

  export type CarsScalarFieldEnum = (typeof CarsScalarFieldEnum)[keyof typeof CarsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type FuelWhereInput = {
    AND?: FuelWhereInput | FuelWhereInput[]
    OR?: FuelWhereInput[]
    NOT?: FuelWhereInput | FuelWhereInput[]
    id?: BigIntFilter<"Fuel"> | bigint | number
    type?: StringFilter<"Fuel"> | string
    price?: FloatFilter<"Fuel"> | number
    octan_rating?: IntFilter<"Fuel"> | number
    cars?: CarsListRelationFilter
  }

  export type FuelOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    price?: SortOrder
    octan_rating?: SortOrder
    cars?: carsOrderByRelationAggregateInput
  }

  export type FuelWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: FuelWhereInput | FuelWhereInput[]
    OR?: FuelWhereInput[]
    NOT?: FuelWhereInput | FuelWhereInput[]
    type?: StringFilter<"Fuel"> | string
    price?: FloatFilter<"Fuel"> | number
    octan_rating?: IntFilter<"Fuel"> | number
    cars?: CarsListRelationFilter
  }, "id">

  export type FuelOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    price?: SortOrder
    octan_rating?: SortOrder
    _count?: FuelCountOrderByAggregateInput
    _avg?: FuelAvgOrderByAggregateInput
    _max?: FuelMaxOrderByAggregateInput
    _min?: FuelMinOrderByAggregateInput
    _sum?: FuelSumOrderByAggregateInput
  }

  export type FuelScalarWhereWithAggregatesInput = {
    AND?: FuelScalarWhereWithAggregatesInput | FuelScalarWhereWithAggregatesInput[]
    OR?: FuelScalarWhereWithAggregatesInput[]
    NOT?: FuelScalarWhereWithAggregatesInput | FuelScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Fuel"> | bigint | number
    type?: StringWithAggregatesFilter<"Fuel"> | string
    price?: FloatWithAggregatesFilter<"Fuel"> | number
    octan_rating?: IntWithAggregatesFilter<"Fuel"> | number
  }

  export type ManufactureWhereInput = {
    AND?: ManufactureWhereInput | ManufactureWhereInput[]
    OR?: ManufactureWhereInput[]
    NOT?: ManufactureWhereInput | ManufactureWhereInput[]
    id?: BigIntFilter<"Manufacture"> | bigint | number
    manufacture?: StringFilter<"Manufacture"> | string
    address?: StringNullableFilter<"Manufacture"> | string | null
    cars?: CarsListRelationFilter
  }

  export type ManufactureOrderByWithRelationInput = {
    id?: SortOrder
    manufacture?: SortOrder
    address?: SortOrderInput | SortOrder
    cars?: carsOrderByRelationAggregateInput
  }

  export type ManufactureWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ManufactureWhereInput | ManufactureWhereInput[]
    OR?: ManufactureWhereInput[]
    NOT?: ManufactureWhereInput | ManufactureWhereInput[]
    manufacture?: StringFilter<"Manufacture"> | string
    address?: StringNullableFilter<"Manufacture"> | string | null
    cars?: CarsListRelationFilter
  }, "id">

  export type ManufactureOrderByWithAggregationInput = {
    id?: SortOrder
    manufacture?: SortOrder
    address?: SortOrderInput | SortOrder
    _count?: ManufactureCountOrderByAggregateInput
    _avg?: ManufactureAvgOrderByAggregateInput
    _max?: ManufactureMaxOrderByAggregateInput
    _min?: ManufactureMinOrderByAggregateInput
    _sum?: ManufactureSumOrderByAggregateInput
  }

  export type ManufactureScalarWhereWithAggregatesInput = {
    AND?: ManufactureScalarWhereWithAggregatesInput | ManufactureScalarWhereWithAggregatesInput[]
    OR?: ManufactureScalarWhereWithAggregatesInput[]
    NOT?: ManufactureScalarWhereWithAggregatesInput | ManufactureScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Manufacture"> | bigint | number
    manufacture?: StringWithAggregatesFilter<"Manufacture"> | string
    address?: StringNullableWithAggregatesFilter<"Manufacture"> | string | null
  }

  export type ModelWhereInput = {
    AND?: ModelWhereInput | ModelWhereInput[]
    OR?: ModelWhereInput[]
    NOT?: ModelWhereInput | ModelWhereInput[]
    id?: BigIntFilter<"Model"> | bigint | number
    type?: StringFilter<"Model"> | string
    year?: IntNullableFilter<"Model"> | number | null
    cars?: CarsListRelationFilter
  }

  export type ModelOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    year?: SortOrderInput | SortOrder
    cars?: carsOrderByRelationAggregateInput
  }

  export type ModelWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ModelWhereInput | ModelWhereInput[]
    OR?: ModelWhereInput[]
    NOT?: ModelWhereInput | ModelWhereInput[]
    type?: StringFilter<"Model"> | string
    year?: IntNullableFilter<"Model"> | number | null
    cars?: CarsListRelationFilter
  }, "id">

  export type ModelOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    year?: SortOrderInput | SortOrder
    _count?: ModelCountOrderByAggregateInput
    _avg?: ModelAvgOrderByAggregateInput
    _max?: ModelMaxOrderByAggregateInput
    _min?: ModelMinOrderByAggregateInput
    _sum?: ModelSumOrderByAggregateInput
  }

  export type ModelScalarWhereWithAggregatesInput = {
    AND?: ModelScalarWhereWithAggregatesInput | ModelScalarWhereWithAggregatesInput[]
    OR?: ModelScalarWhereWithAggregatesInput[]
    NOT?: ModelScalarWhereWithAggregatesInput | ModelScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Model"> | bigint | number
    type?: StringWithAggregatesFilter<"Model"> | string
    year?: IntNullableWithAggregatesFilter<"Model"> | number | null
  }

  export type TransmissionWhereInput = {
    AND?: TransmissionWhereInput | TransmissionWhereInput[]
    OR?: TransmissionWhereInput[]
    NOT?: TransmissionWhereInput | TransmissionWhereInput[]
    id?: BigIntFilter<"Transmission"> | bigint | number
    type?: StringFilter<"Transmission"> | string
    number_of_gears?: IntNullableFilter<"Transmission"> | number | null
    cars?: CarsListRelationFilter
  }

  export type TransmissionOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    number_of_gears?: SortOrderInput | SortOrder
    cars?: carsOrderByRelationAggregateInput
  }

  export type TransmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: TransmissionWhereInput | TransmissionWhereInput[]
    OR?: TransmissionWhereInput[]
    NOT?: TransmissionWhereInput | TransmissionWhereInput[]
    type?: StringFilter<"Transmission"> | string
    number_of_gears?: IntNullableFilter<"Transmission"> | number | null
    cars?: CarsListRelationFilter
  }, "id">

  export type TransmissionOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    number_of_gears?: SortOrderInput | SortOrder
    _count?: TransmissionCountOrderByAggregateInput
    _avg?: TransmissionAvgOrderByAggregateInput
    _max?: TransmissionMaxOrderByAggregateInput
    _min?: TransmissionMinOrderByAggregateInput
    _sum?: TransmissionSumOrderByAggregateInput
  }

  export type TransmissionScalarWhereWithAggregatesInput = {
    AND?: TransmissionScalarWhereWithAggregatesInput | TransmissionScalarWhereWithAggregatesInput[]
    OR?: TransmissionScalarWhereWithAggregatesInput[]
    NOT?: TransmissionScalarWhereWithAggregatesInput | TransmissionScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Transmission"> | bigint | number
    type?: StringWithAggregatesFilter<"Transmission"> | string
    number_of_gears?: IntNullableWithAggregatesFilter<"Transmission"> | number | null
  }

  export type TypeWhereInput = {
    AND?: TypeWhereInput | TypeWhereInput[]
    OR?: TypeWhereInput[]
    NOT?: TypeWhereInput | TypeWhereInput[]
    id?: BigIntFilter<"Type"> | bigint | number
    type?: StringFilter<"Type"> | string
    description?: StringNullableFilter<"Type"> | string | null
    cars?: CarsListRelationFilter
  }

  export type TypeOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    cars?: carsOrderByRelationAggregateInput
  }

  export type TypeWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: TypeWhereInput | TypeWhereInput[]
    OR?: TypeWhereInput[]
    NOT?: TypeWhereInput | TypeWhereInput[]
    type?: StringFilter<"Type"> | string
    description?: StringNullableFilter<"Type"> | string | null
    cars?: CarsListRelationFilter
  }, "id">

  export type TypeOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: TypeCountOrderByAggregateInput
    _avg?: TypeAvgOrderByAggregateInput
    _max?: TypeMaxOrderByAggregateInput
    _min?: TypeMinOrderByAggregateInput
    _sum?: TypeSumOrderByAggregateInput
  }

  export type TypeScalarWhereWithAggregatesInput = {
    AND?: TypeScalarWhereWithAggregatesInput | TypeScalarWhereWithAggregatesInput[]
    OR?: TypeScalarWhereWithAggregatesInput[]
    NOT?: TypeScalarWhereWithAggregatesInput | TypeScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Type"> | bigint | number
    type?: StringWithAggregatesFilter<"Type"> | string
    description?: StringNullableWithAggregatesFilter<"Type"> | string | null
  }

  export type carsWhereInput = {
    AND?: carsWhereInput | carsWhereInput[]
    OR?: carsWhereInput[]
    NOT?: carsWhereInput | carsWhereInput[]
    id?: IntFilter<"cars"> | number
    plate?: StringFilter<"cars"> | string
    manufacture_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    model_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    image?: StringNullableFilter<"cars"> | string | null
    rentPerDay?: IntFilter<"cars"> | number
    capacity?: IntFilter<"cars"> | number
    description?: StringNullableFilter<"cars"> | string | null
    availableAt?: StringFilter<"cars"> | string
    transmission_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    available?: BoolFilter<"cars"> | boolean
    type_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    year?: IntFilter<"cars"> | number
    options?: JsonNullableFilter<"cars">
    specs?: JsonNullableFilter<"cars">
    fuel_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    Fuel?: XOR<FuelNullableRelationFilter, FuelWhereInput> | null
    Manufacture?: XOR<ManufactureNullableRelationFilter, ManufactureWhereInput> | null
    Model?: XOR<ModelNullableRelationFilter, ModelWhereInput> | null
    Transmission?: XOR<TransmissionNullableRelationFilter, TransmissionWhereInput> | null
    Type?: XOR<TypeNullableRelationFilter, TypeWhereInput> | null
  }

  export type carsOrderByWithRelationInput = {
    id?: SortOrder
    plate?: SortOrder
    manufacture_id?: SortOrderInput | SortOrder
    model_id?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    rentPerDay?: SortOrder
    capacity?: SortOrder
    description?: SortOrderInput | SortOrder
    availableAt?: SortOrder
    transmission_id?: SortOrderInput | SortOrder
    available?: SortOrder
    type_id?: SortOrderInput | SortOrder
    year?: SortOrder
    options?: SortOrderInput | SortOrder
    specs?: SortOrderInput | SortOrder
    fuel_id?: SortOrderInput | SortOrder
    Fuel?: FuelOrderByWithRelationInput
    Manufacture?: ManufactureOrderByWithRelationInput
    Model?: ModelOrderByWithRelationInput
    Transmission?: TransmissionOrderByWithRelationInput
    Type?: TypeOrderByWithRelationInput
  }

  export type carsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: carsWhereInput | carsWhereInput[]
    OR?: carsWhereInput[]
    NOT?: carsWhereInput | carsWhereInput[]
    plate?: StringFilter<"cars"> | string
    manufacture_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    model_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    image?: StringNullableFilter<"cars"> | string | null
    rentPerDay?: IntFilter<"cars"> | number
    capacity?: IntFilter<"cars"> | number
    description?: StringNullableFilter<"cars"> | string | null
    availableAt?: StringFilter<"cars"> | string
    transmission_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    available?: BoolFilter<"cars"> | boolean
    type_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    year?: IntFilter<"cars"> | number
    options?: JsonNullableFilter<"cars">
    specs?: JsonNullableFilter<"cars">
    fuel_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    Fuel?: XOR<FuelNullableRelationFilter, FuelWhereInput> | null
    Manufacture?: XOR<ManufactureNullableRelationFilter, ManufactureWhereInput> | null
    Model?: XOR<ModelNullableRelationFilter, ModelWhereInput> | null
    Transmission?: XOR<TransmissionNullableRelationFilter, TransmissionWhereInput> | null
    Type?: XOR<TypeNullableRelationFilter, TypeWhereInput> | null
  }, "id">

  export type carsOrderByWithAggregationInput = {
    id?: SortOrder
    plate?: SortOrder
    manufacture_id?: SortOrderInput | SortOrder
    model_id?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    rentPerDay?: SortOrder
    capacity?: SortOrder
    description?: SortOrderInput | SortOrder
    availableAt?: SortOrder
    transmission_id?: SortOrderInput | SortOrder
    available?: SortOrder
    type_id?: SortOrderInput | SortOrder
    year?: SortOrder
    options?: SortOrderInput | SortOrder
    specs?: SortOrderInput | SortOrder
    fuel_id?: SortOrderInput | SortOrder
    _count?: carsCountOrderByAggregateInput
    _avg?: carsAvgOrderByAggregateInput
    _max?: carsMaxOrderByAggregateInput
    _min?: carsMinOrderByAggregateInput
    _sum?: carsSumOrderByAggregateInput
  }

  export type carsScalarWhereWithAggregatesInput = {
    AND?: carsScalarWhereWithAggregatesInput | carsScalarWhereWithAggregatesInput[]
    OR?: carsScalarWhereWithAggregatesInput[]
    NOT?: carsScalarWhereWithAggregatesInput | carsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"cars"> | number
    plate?: StringWithAggregatesFilter<"cars"> | string
    manufacture_id?: BigIntNullableWithAggregatesFilter<"cars"> | bigint | number | null
    model_id?: BigIntNullableWithAggregatesFilter<"cars"> | bigint | number | null
    image?: StringNullableWithAggregatesFilter<"cars"> | string | null
    rentPerDay?: IntWithAggregatesFilter<"cars"> | number
    capacity?: IntWithAggregatesFilter<"cars"> | number
    description?: StringNullableWithAggregatesFilter<"cars"> | string | null
    availableAt?: StringWithAggregatesFilter<"cars"> | string
    transmission_id?: BigIntNullableWithAggregatesFilter<"cars"> | bigint | number | null
    available?: BoolWithAggregatesFilter<"cars"> | boolean
    type_id?: BigIntNullableWithAggregatesFilter<"cars"> | bigint | number | null
    year?: IntWithAggregatesFilter<"cars"> | number
    options?: JsonNullableWithAggregatesFilter<"cars">
    specs?: JsonNullableWithAggregatesFilter<"cars">
    fuel_id?: BigIntNullableWithAggregatesFilter<"cars"> | bigint | number | null
  }

  export type FuelCreateInput = {
    id?: bigint | number
    type: string
    price: number
    octan_rating: number
    cars?: carsCreateNestedManyWithoutFuelInput
  }

  export type FuelUncheckedCreateInput = {
    id?: bigint | number
    type: string
    price: number
    octan_rating: number
    cars?: carsUncheckedCreateNestedManyWithoutFuelInput
  }

  export type FuelUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    octan_rating?: IntFieldUpdateOperationsInput | number
    cars?: carsUpdateManyWithoutFuelNestedInput
  }

  export type FuelUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    octan_rating?: IntFieldUpdateOperationsInput | number
    cars?: carsUncheckedUpdateManyWithoutFuelNestedInput
  }

  export type FuelCreateManyInput = {
    id?: bigint | number
    type: string
    price: number
    octan_rating: number
  }

  export type FuelUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    octan_rating?: IntFieldUpdateOperationsInput | number
  }

  export type FuelUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    octan_rating?: IntFieldUpdateOperationsInput | number
  }

  export type ManufactureCreateInput = {
    id?: bigint | number
    manufacture: string
    address?: string | null
    cars?: carsCreateNestedManyWithoutManufactureInput
  }

  export type ManufactureUncheckedCreateInput = {
    id?: bigint | number
    manufacture: string
    address?: string | null
    cars?: carsUncheckedCreateNestedManyWithoutManufactureInput
  }

  export type ManufactureUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    manufacture?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cars?: carsUpdateManyWithoutManufactureNestedInput
  }

  export type ManufactureUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    manufacture?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cars?: carsUncheckedUpdateManyWithoutManufactureNestedInput
  }

  export type ManufactureCreateManyInput = {
    id?: bigint | number
    manufacture: string
    address?: string | null
  }

  export type ManufactureUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    manufacture?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManufactureUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    manufacture?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ModelCreateInput = {
    id?: bigint | number
    type: string
    year?: number | null
    cars?: carsCreateNestedManyWithoutModelInput
  }

  export type ModelUncheckedCreateInput = {
    id?: bigint | number
    type: string
    year?: number | null
    cars?: carsUncheckedCreateNestedManyWithoutModelInput
  }

  export type ModelUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    cars?: carsUpdateManyWithoutModelNestedInput
  }

  export type ModelUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    cars?: carsUncheckedUpdateManyWithoutModelNestedInput
  }

  export type ModelCreateManyInput = {
    id?: bigint | number
    type: string
    year?: number | null
  }

  export type ModelUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ModelUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TransmissionCreateInput = {
    id?: bigint | number
    type: string
    number_of_gears?: number | null
    cars?: carsCreateNestedManyWithoutTransmissionInput
  }

  export type TransmissionUncheckedCreateInput = {
    id?: bigint | number
    type: string
    number_of_gears?: number | null
    cars?: carsUncheckedCreateNestedManyWithoutTransmissionInput
  }

  export type TransmissionUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    number_of_gears?: NullableIntFieldUpdateOperationsInput | number | null
    cars?: carsUpdateManyWithoutTransmissionNestedInput
  }

  export type TransmissionUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    number_of_gears?: NullableIntFieldUpdateOperationsInput | number | null
    cars?: carsUncheckedUpdateManyWithoutTransmissionNestedInput
  }

  export type TransmissionCreateManyInput = {
    id?: bigint | number
    type: string
    number_of_gears?: number | null
  }

  export type TransmissionUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    number_of_gears?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TransmissionUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    number_of_gears?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TypeCreateInput = {
    id?: bigint | number
    type: string
    description?: string | null
    cars?: carsCreateNestedManyWithoutTypeInput
  }

  export type TypeUncheckedCreateInput = {
    id?: bigint | number
    type: string
    description?: string | null
    cars?: carsUncheckedCreateNestedManyWithoutTypeInput
  }

  export type TypeUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cars?: carsUpdateManyWithoutTypeNestedInput
  }

  export type TypeUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cars?: carsUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type TypeCreateManyInput = {
    id?: bigint | number
    type: string
    description?: string | null
  }

  export type TypeUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TypeUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type carsCreateInput = {
    plate: string
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    available: boolean
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    Fuel?: FuelCreateNestedOneWithoutCarsInput
    Manufacture?: ManufactureCreateNestedOneWithoutCarsInput
    Model?: ModelCreateNestedOneWithoutCarsInput
    Transmission?: TransmissionCreateNestedOneWithoutCarsInput
    Type?: TypeCreateNestedOneWithoutCarsInput
  }

  export type carsUncheckedCreateInput = {
    id?: number
    plate: string
    manufacture_id?: bigint | number | null
    model_id?: bigint | number | null
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    transmission_id?: bigint | number | null
    available: boolean
    type_id?: bigint | number | null
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: bigint | number | null
  }

  export type carsUpdateInput = {
    plate?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    Fuel?: FuelUpdateOneWithoutCarsNestedInput
    Manufacture?: ManufactureUpdateOneWithoutCarsNestedInput
    Model?: ModelUpdateOneWithoutCarsNestedInput
    Transmission?: TransmissionUpdateOneWithoutCarsNestedInput
    Type?: TypeUpdateOneWithoutCarsNestedInput
  }

  export type carsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    plate?: StringFieldUpdateOperationsInput | string
    manufacture_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    model_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    transmission_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    available?: BoolFieldUpdateOperationsInput | boolean
    type_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type carsCreateManyInput = {
    id?: number
    plate: string
    manufacture_id?: bigint | number | null
    model_id?: bigint | number | null
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    transmission_id?: bigint | number | null
    available: boolean
    type_id?: bigint | number | null
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: bigint | number | null
  }

  export type carsUpdateManyMutationInput = {
    plate?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
  }

  export type carsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    plate?: StringFieldUpdateOperationsInput | string
    manufacture_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    model_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    transmission_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    available?: BoolFieldUpdateOperationsInput | boolean
    type_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CarsListRelationFilter = {
    every?: carsWhereInput
    some?: carsWhereInput
    none?: carsWhereInput
  }

  export type carsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FuelCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    price?: SortOrder
    octan_rating?: SortOrder
  }

  export type FuelAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    octan_rating?: SortOrder
  }

  export type FuelMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    price?: SortOrder
    octan_rating?: SortOrder
  }

  export type FuelMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    price?: SortOrder
    octan_rating?: SortOrder
  }

  export type FuelSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    octan_rating?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ManufactureCountOrderByAggregateInput = {
    id?: SortOrder
    manufacture?: SortOrder
    address?: SortOrder
  }

  export type ManufactureAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ManufactureMaxOrderByAggregateInput = {
    id?: SortOrder
    manufacture?: SortOrder
    address?: SortOrder
  }

  export type ManufactureMinOrderByAggregateInput = {
    id?: SortOrder
    manufacture?: SortOrder
    address?: SortOrder
  }

  export type ManufactureSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ModelCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    year?: SortOrder
  }

  export type ModelAvgOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
  }

  export type ModelMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    year?: SortOrder
  }

  export type ModelMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    year?: SortOrder
  }

  export type ModelSumOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type TransmissionCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    number_of_gears?: SortOrder
  }

  export type TransmissionAvgOrderByAggregateInput = {
    id?: SortOrder
    number_of_gears?: SortOrder
  }

  export type TransmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    number_of_gears?: SortOrder
  }

  export type TransmissionMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    number_of_gears?: SortOrder
  }

  export type TransmissionSumOrderByAggregateInput = {
    id?: SortOrder
    number_of_gears?: SortOrder
  }

  export type TypeCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
  }

  export type TypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TypeMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
  }

  export type TypeMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    description?: SortOrder
  }

  export type TypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FuelNullableRelationFilter = {
    is?: FuelWhereInput | null
    isNot?: FuelWhereInput | null
  }

  export type ManufactureNullableRelationFilter = {
    is?: ManufactureWhereInput | null
    isNot?: ManufactureWhereInput | null
  }

  export type ModelNullableRelationFilter = {
    is?: ModelWhereInput | null
    isNot?: ModelWhereInput | null
  }

  export type TransmissionNullableRelationFilter = {
    is?: TransmissionWhereInput | null
    isNot?: TransmissionWhereInput | null
  }

  export type TypeNullableRelationFilter = {
    is?: TypeWhereInput | null
    isNot?: TypeWhereInput | null
  }

  export type carsCountOrderByAggregateInput = {
    id?: SortOrder
    plate?: SortOrder
    manufacture_id?: SortOrder
    model_id?: SortOrder
    image?: SortOrder
    rentPerDay?: SortOrder
    capacity?: SortOrder
    description?: SortOrder
    availableAt?: SortOrder
    transmission_id?: SortOrder
    available?: SortOrder
    type_id?: SortOrder
    year?: SortOrder
    options?: SortOrder
    specs?: SortOrder
    fuel_id?: SortOrder
  }

  export type carsAvgOrderByAggregateInput = {
    id?: SortOrder
    manufacture_id?: SortOrder
    model_id?: SortOrder
    rentPerDay?: SortOrder
    capacity?: SortOrder
    transmission_id?: SortOrder
    type_id?: SortOrder
    year?: SortOrder
    fuel_id?: SortOrder
  }

  export type carsMaxOrderByAggregateInput = {
    id?: SortOrder
    plate?: SortOrder
    manufacture_id?: SortOrder
    model_id?: SortOrder
    image?: SortOrder
    rentPerDay?: SortOrder
    capacity?: SortOrder
    description?: SortOrder
    availableAt?: SortOrder
    transmission_id?: SortOrder
    available?: SortOrder
    type_id?: SortOrder
    year?: SortOrder
    fuel_id?: SortOrder
  }

  export type carsMinOrderByAggregateInput = {
    id?: SortOrder
    plate?: SortOrder
    manufacture_id?: SortOrder
    model_id?: SortOrder
    image?: SortOrder
    rentPerDay?: SortOrder
    capacity?: SortOrder
    description?: SortOrder
    availableAt?: SortOrder
    transmission_id?: SortOrder
    available?: SortOrder
    type_id?: SortOrder
    year?: SortOrder
    fuel_id?: SortOrder
  }

  export type carsSumOrderByAggregateInput = {
    id?: SortOrder
    manufacture_id?: SortOrder
    model_id?: SortOrder
    rentPerDay?: SortOrder
    capacity?: SortOrder
    transmission_id?: SortOrder
    type_id?: SortOrder
    year?: SortOrder
    fuel_id?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type carsCreateNestedManyWithoutFuelInput = {
    create?: XOR<carsCreateWithoutFuelInput, carsUncheckedCreateWithoutFuelInput> | carsCreateWithoutFuelInput[] | carsUncheckedCreateWithoutFuelInput[]
    connectOrCreate?: carsCreateOrConnectWithoutFuelInput | carsCreateOrConnectWithoutFuelInput[]
    createMany?: carsCreateManyFuelInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type carsUncheckedCreateNestedManyWithoutFuelInput = {
    create?: XOR<carsCreateWithoutFuelInput, carsUncheckedCreateWithoutFuelInput> | carsCreateWithoutFuelInput[] | carsUncheckedCreateWithoutFuelInput[]
    connectOrCreate?: carsCreateOrConnectWithoutFuelInput | carsCreateOrConnectWithoutFuelInput[]
    createMany?: carsCreateManyFuelInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type carsUpdateManyWithoutFuelNestedInput = {
    create?: XOR<carsCreateWithoutFuelInput, carsUncheckedCreateWithoutFuelInput> | carsCreateWithoutFuelInput[] | carsUncheckedCreateWithoutFuelInput[]
    connectOrCreate?: carsCreateOrConnectWithoutFuelInput | carsCreateOrConnectWithoutFuelInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutFuelInput | carsUpsertWithWhereUniqueWithoutFuelInput[]
    createMany?: carsCreateManyFuelInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutFuelInput | carsUpdateWithWhereUniqueWithoutFuelInput[]
    updateMany?: carsUpdateManyWithWhereWithoutFuelInput | carsUpdateManyWithWhereWithoutFuelInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type carsUncheckedUpdateManyWithoutFuelNestedInput = {
    create?: XOR<carsCreateWithoutFuelInput, carsUncheckedCreateWithoutFuelInput> | carsCreateWithoutFuelInput[] | carsUncheckedCreateWithoutFuelInput[]
    connectOrCreate?: carsCreateOrConnectWithoutFuelInput | carsCreateOrConnectWithoutFuelInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutFuelInput | carsUpsertWithWhereUniqueWithoutFuelInput[]
    createMany?: carsCreateManyFuelInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutFuelInput | carsUpdateWithWhereUniqueWithoutFuelInput[]
    updateMany?: carsUpdateManyWithWhereWithoutFuelInput | carsUpdateManyWithWhereWithoutFuelInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type carsCreateNestedManyWithoutManufactureInput = {
    create?: XOR<carsCreateWithoutManufactureInput, carsUncheckedCreateWithoutManufactureInput> | carsCreateWithoutManufactureInput[] | carsUncheckedCreateWithoutManufactureInput[]
    connectOrCreate?: carsCreateOrConnectWithoutManufactureInput | carsCreateOrConnectWithoutManufactureInput[]
    createMany?: carsCreateManyManufactureInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type carsUncheckedCreateNestedManyWithoutManufactureInput = {
    create?: XOR<carsCreateWithoutManufactureInput, carsUncheckedCreateWithoutManufactureInput> | carsCreateWithoutManufactureInput[] | carsUncheckedCreateWithoutManufactureInput[]
    connectOrCreate?: carsCreateOrConnectWithoutManufactureInput | carsCreateOrConnectWithoutManufactureInput[]
    createMany?: carsCreateManyManufactureInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type carsUpdateManyWithoutManufactureNestedInput = {
    create?: XOR<carsCreateWithoutManufactureInput, carsUncheckedCreateWithoutManufactureInput> | carsCreateWithoutManufactureInput[] | carsUncheckedCreateWithoutManufactureInput[]
    connectOrCreate?: carsCreateOrConnectWithoutManufactureInput | carsCreateOrConnectWithoutManufactureInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutManufactureInput | carsUpsertWithWhereUniqueWithoutManufactureInput[]
    createMany?: carsCreateManyManufactureInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutManufactureInput | carsUpdateWithWhereUniqueWithoutManufactureInput[]
    updateMany?: carsUpdateManyWithWhereWithoutManufactureInput | carsUpdateManyWithWhereWithoutManufactureInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type carsUncheckedUpdateManyWithoutManufactureNestedInput = {
    create?: XOR<carsCreateWithoutManufactureInput, carsUncheckedCreateWithoutManufactureInput> | carsCreateWithoutManufactureInput[] | carsUncheckedCreateWithoutManufactureInput[]
    connectOrCreate?: carsCreateOrConnectWithoutManufactureInput | carsCreateOrConnectWithoutManufactureInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutManufactureInput | carsUpsertWithWhereUniqueWithoutManufactureInput[]
    createMany?: carsCreateManyManufactureInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutManufactureInput | carsUpdateWithWhereUniqueWithoutManufactureInput[]
    updateMany?: carsUpdateManyWithWhereWithoutManufactureInput | carsUpdateManyWithWhereWithoutManufactureInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type carsCreateNestedManyWithoutModelInput = {
    create?: XOR<carsCreateWithoutModelInput, carsUncheckedCreateWithoutModelInput> | carsCreateWithoutModelInput[] | carsUncheckedCreateWithoutModelInput[]
    connectOrCreate?: carsCreateOrConnectWithoutModelInput | carsCreateOrConnectWithoutModelInput[]
    createMany?: carsCreateManyModelInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type carsUncheckedCreateNestedManyWithoutModelInput = {
    create?: XOR<carsCreateWithoutModelInput, carsUncheckedCreateWithoutModelInput> | carsCreateWithoutModelInput[] | carsUncheckedCreateWithoutModelInput[]
    connectOrCreate?: carsCreateOrConnectWithoutModelInput | carsCreateOrConnectWithoutModelInput[]
    createMany?: carsCreateManyModelInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type carsUpdateManyWithoutModelNestedInput = {
    create?: XOR<carsCreateWithoutModelInput, carsUncheckedCreateWithoutModelInput> | carsCreateWithoutModelInput[] | carsUncheckedCreateWithoutModelInput[]
    connectOrCreate?: carsCreateOrConnectWithoutModelInput | carsCreateOrConnectWithoutModelInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutModelInput | carsUpsertWithWhereUniqueWithoutModelInput[]
    createMany?: carsCreateManyModelInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutModelInput | carsUpdateWithWhereUniqueWithoutModelInput[]
    updateMany?: carsUpdateManyWithWhereWithoutModelInput | carsUpdateManyWithWhereWithoutModelInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type carsUncheckedUpdateManyWithoutModelNestedInput = {
    create?: XOR<carsCreateWithoutModelInput, carsUncheckedCreateWithoutModelInput> | carsCreateWithoutModelInput[] | carsUncheckedCreateWithoutModelInput[]
    connectOrCreate?: carsCreateOrConnectWithoutModelInput | carsCreateOrConnectWithoutModelInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutModelInput | carsUpsertWithWhereUniqueWithoutModelInput[]
    createMany?: carsCreateManyModelInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutModelInput | carsUpdateWithWhereUniqueWithoutModelInput[]
    updateMany?: carsUpdateManyWithWhereWithoutModelInput | carsUpdateManyWithWhereWithoutModelInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type carsCreateNestedManyWithoutTransmissionInput = {
    create?: XOR<carsCreateWithoutTransmissionInput, carsUncheckedCreateWithoutTransmissionInput> | carsCreateWithoutTransmissionInput[] | carsUncheckedCreateWithoutTransmissionInput[]
    connectOrCreate?: carsCreateOrConnectWithoutTransmissionInput | carsCreateOrConnectWithoutTransmissionInput[]
    createMany?: carsCreateManyTransmissionInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type carsUncheckedCreateNestedManyWithoutTransmissionInput = {
    create?: XOR<carsCreateWithoutTransmissionInput, carsUncheckedCreateWithoutTransmissionInput> | carsCreateWithoutTransmissionInput[] | carsUncheckedCreateWithoutTransmissionInput[]
    connectOrCreate?: carsCreateOrConnectWithoutTransmissionInput | carsCreateOrConnectWithoutTransmissionInput[]
    createMany?: carsCreateManyTransmissionInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type carsUpdateManyWithoutTransmissionNestedInput = {
    create?: XOR<carsCreateWithoutTransmissionInput, carsUncheckedCreateWithoutTransmissionInput> | carsCreateWithoutTransmissionInput[] | carsUncheckedCreateWithoutTransmissionInput[]
    connectOrCreate?: carsCreateOrConnectWithoutTransmissionInput | carsCreateOrConnectWithoutTransmissionInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutTransmissionInput | carsUpsertWithWhereUniqueWithoutTransmissionInput[]
    createMany?: carsCreateManyTransmissionInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutTransmissionInput | carsUpdateWithWhereUniqueWithoutTransmissionInput[]
    updateMany?: carsUpdateManyWithWhereWithoutTransmissionInput | carsUpdateManyWithWhereWithoutTransmissionInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type carsUncheckedUpdateManyWithoutTransmissionNestedInput = {
    create?: XOR<carsCreateWithoutTransmissionInput, carsUncheckedCreateWithoutTransmissionInput> | carsCreateWithoutTransmissionInput[] | carsUncheckedCreateWithoutTransmissionInput[]
    connectOrCreate?: carsCreateOrConnectWithoutTransmissionInput | carsCreateOrConnectWithoutTransmissionInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutTransmissionInput | carsUpsertWithWhereUniqueWithoutTransmissionInput[]
    createMany?: carsCreateManyTransmissionInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutTransmissionInput | carsUpdateWithWhereUniqueWithoutTransmissionInput[]
    updateMany?: carsUpdateManyWithWhereWithoutTransmissionInput | carsUpdateManyWithWhereWithoutTransmissionInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type carsCreateNestedManyWithoutTypeInput = {
    create?: XOR<carsCreateWithoutTypeInput, carsUncheckedCreateWithoutTypeInput> | carsCreateWithoutTypeInput[] | carsUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: carsCreateOrConnectWithoutTypeInput | carsCreateOrConnectWithoutTypeInput[]
    createMany?: carsCreateManyTypeInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type carsUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<carsCreateWithoutTypeInput, carsUncheckedCreateWithoutTypeInput> | carsCreateWithoutTypeInput[] | carsUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: carsCreateOrConnectWithoutTypeInput | carsCreateOrConnectWithoutTypeInput[]
    createMany?: carsCreateManyTypeInputEnvelope
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
  }

  export type carsUpdateManyWithoutTypeNestedInput = {
    create?: XOR<carsCreateWithoutTypeInput, carsUncheckedCreateWithoutTypeInput> | carsCreateWithoutTypeInput[] | carsUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: carsCreateOrConnectWithoutTypeInput | carsCreateOrConnectWithoutTypeInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutTypeInput | carsUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: carsCreateManyTypeInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutTypeInput | carsUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: carsUpdateManyWithWhereWithoutTypeInput | carsUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type carsUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<carsCreateWithoutTypeInput, carsUncheckedCreateWithoutTypeInput> | carsCreateWithoutTypeInput[] | carsUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: carsCreateOrConnectWithoutTypeInput | carsCreateOrConnectWithoutTypeInput[]
    upsert?: carsUpsertWithWhereUniqueWithoutTypeInput | carsUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: carsCreateManyTypeInputEnvelope
    set?: carsWhereUniqueInput | carsWhereUniqueInput[]
    disconnect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    delete?: carsWhereUniqueInput | carsWhereUniqueInput[]
    connect?: carsWhereUniqueInput | carsWhereUniqueInput[]
    update?: carsUpdateWithWhereUniqueWithoutTypeInput | carsUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: carsUpdateManyWithWhereWithoutTypeInput | carsUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: carsScalarWhereInput | carsScalarWhereInput[]
  }

  export type FuelCreateNestedOneWithoutCarsInput = {
    create?: XOR<FuelCreateWithoutCarsInput, FuelUncheckedCreateWithoutCarsInput>
    connectOrCreate?: FuelCreateOrConnectWithoutCarsInput
    connect?: FuelWhereUniqueInput
  }

  export type ManufactureCreateNestedOneWithoutCarsInput = {
    create?: XOR<ManufactureCreateWithoutCarsInput, ManufactureUncheckedCreateWithoutCarsInput>
    connectOrCreate?: ManufactureCreateOrConnectWithoutCarsInput
    connect?: ManufactureWhereUniqueInput
  }

  export type ModelCreateNestedOneWithoutCarsInput = {
    create?: XOR<ModelCreateWithoutCarsInput, ModelUncheckedCreateWithoutCarsInput>
    connectOrCreate?: ModelCreateOrConnectWithoutCarsInput
    connect?: ModelWhereUniqueInput
  }

  export type TransmissionCreateNestedOneWithoutCarsInput = {
    create?: XOR<TransmissionCreateWithoutCarsInput, TransmissionUncheckedCreateWithoutCarsInput>
    connectOrCreate?: TransmissionCreateOrConnectWithoutCarsInput
    connect?: TransmissionWhereUniqueInput
  }

  export type TypeCreateNestedOneWithoutCarsInput = {
    create?: XOR<TypeCreateWithoutCarsInput, TypeUncheckedCreateWithoutCarsInput>
    connectOrCreate?: TypeCreateOrConnectWithoutCarsInput
    connect?: TypeWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FuelUpdateOneWithoutCarsNestedInput = {
    create?: XOR<FuelCreateWithoutCarsInput, FuelUncheckedCreateWithoutCarsInput>
    connectOrCreate?: FuelCreateOrConnectWithoutCarsInput
    upsert?: FuelUpsertWithoutCarsInput
    disconnect?: FuelWhereInput | boolean
    delete?: FuelWhereInput | boolean
    connect?: FuelWhereUniqueInput
    update?: XOR<XOR<FuelUpdateToOneWithWhereWithoutCarsInput, FuelUpdateWithoutCarsInput>, FuelUncheckedUpdateWithoutCarsInput>
  }

  export type ManufactureUpdateOneWithoutCarsNestedInput = {
    create?: XOR<ManufactureCreateWithoutCarsInput, ManufactureUncheckedCreateWithoutCarsInput>
    connectOrCreate?: ManufactureCreateOrConnectWithoutCarsInput
    upsert?: ManufactureUpsertWithoutCarsInput
    disconnect?: ManufactureWhereInput | boolean
    delete?: ManufactureWhereInput | boolean
    connect?: ManufactureWhereUniqueInput
    update?: XOR<XOR<ManufactureUpdateToOneWithWhereWithoutCarsInput, ManufactureUpdateWithoutCarsInput>, ManufactureUncheckedUpdateWithoutCarsInput>
  }

  export type ModelUpdateOneWithoutCarsNestedInput = {
    create?: XOR<ModelCreateWithoutCarsInput, ModelUncheckedCreateWithoutCarsInput>
    connectOrCreate?: ModelCreateOrConnectWithoutCarsInput
    upsert?: ModelUpsertWithoutCarsInput
    disconnect?: ModelWhereInput | boolean
    delete?: ModelWhereInput | boolean
    connect?: ModelWhereUniqueInput
    update?: XOR<XOR<ModelUpdateToOneWithWhereWithoutCarsInput, ModelUpdateWithoutCarsInput>, ModelUncheckedUpdateWithoutCarsInput>
  }

  export type TransmissionUpdateOneWithoutCarsNestedInput = {
    create?: XOR<TransmissionCreateWithoutCarsInput, TransmissionUncheckedCreateWithoutCarsInput>
    connectOrCreate?: TransmissionCreateOrConnectWithoutCarsInput
    upsert?: TransmissionUpsertWithoutCarsInput
    disconnect?: TransmissionWhereInput | boolean
    delete?: TransmissionWhereInput | boolean
    connect?: TransmissionWhereUniqueInput
    update?: XOR<XOR<TransmissionUpdateToOneWithWhereWithoutCarsInput, TransmissionUpdateWithoutCarsInput>, TransmissionUncheckedUpdateWithoutCarsInput>
  }

  export type TypeUpdateOneWithoutCarsNestedInput = {
    create?: XOR<TypeCreateWithoutCarsInput, TypeUncheckedCreateWithoutCarsInput>
    connectOrCreate?: TypeCreateOrConnectWithoutCarsInput
    upsert?: TypeUpsertWithoutCarsInput
    disconnect?: TypeWhereInput | boolean
    delete?: TypeWhereInput | boolean
    connect?: TypeWhereUniqueInput
    update?: XOR<XOR<TypeUpdateToOneWithWhereWithoutCarsInput, TypeUpdateWithoutCarsInput>, TypeUncheckedUpdateWithoutCarsInput>
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type carsCreateWithoutFuelInput = {
    plate: string
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    available: boolean
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    Manufacture?: ManufactureCreateNestedOneWithoutCarsInput
    Model?: ModelCreateNestedOneWithoutCarsInput
    Transmission?: TransmissionCreateNestedOneWithoutCarsInput
    Type?: TypeCreateNestedOneWithoutCarsInput
  }

  export type carsUncheckedCreateWithoutFuelInput = {
    id?: number
    plate: string
    manufacture_id?: bigint | number | null
    model_id?: bigint | number | null
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    transmission_id?: bigint | number | null
    available: boolean
    type_id?: bigint | number | null
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
  }

  export type carsCreateOrConnectWithoutFuelInput = {
    where: carsWhereUniqueInput
    create: XOR<carsCreateWithoutFuelInput, carsUncheckedCreateWithoutFuelInput>
  }

  export type carsCreateManyFuelInputEnvelope = {
    data: carsCreateManyFuelInput | carsCreateManyFuelInput[]
    skipDuplicates?: boolean
  }

  export type carsUpsertWithWhereUniqueWithoutFuelInput = {
    where: carsWhereUniqueInput
    update: XOR<carsUpdateWithoutFuelInput, carsUncheckedUpdateWithoutFuelInput>
    create: XOR<carsCreateWithoutFuelInput, carsUncheckedCreateWithoutFuelInput>
  }

  export type carsUpdateWithWhereUniqueWithoutFuelInput = {
    where: carsWhereUniqueInput
    data: XOR<carsUpdateWithoutFuelInput, carsUncheckedUpdateWithoutFuelInput>
  }

  export type carsUpdateManyWithWhereWithoutFuelInput = {
    where: carsScalarWhereInput
    data: XOR<carsUpdateManyMutationInput, carsUncheckedUpdateManyWithoutFuelInput>
  }

  export type carsScalarWhereInput = {
    AND?: carsScalarWhereInput | carsScalarWhereInput[]
    OR?: carsScalarWhereInput[]
    NOT?: carsScalarWhereInput | carsScalarWhereInput[]
    id?: IntFilter<"cars"> | number
    plate?: StringFilter<"cars"> | string
    manufacture_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    model_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    image?: StringNullableFilter<"cars"> | string | null
    rentPerDay?: IntFilter<"cars"> | number
    capacity?: IntFilter<"cars"> | number
    description?: StringNullableFilter<"cars"> | string | null
    availableAt?: StringFilter<"cars"> | string
    transmission_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    available?: BoolFilter<"cars"> | boolean
    type_id?: BigIntNullableFilter<"cars"> | bigint | number | null
    year?: IntFilter<"cars"> | number
    options?: JsonNullableFilter<"cars">
    specs?: JsonNullableFilter<"cars">
    fuel_id?: BigIntNullableFilter<"cars"> | bigint | number | null
  }

  export type carsCreateWithoutManufactureInput = {
    plate: string
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    available: boolean
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    Fuel?: FuelCreateNestedOneWithoutCarsInput
    Model?: ModelCreateNestedOneWithoutCarsInput
    Transmission?: TransmissionCreateNestedOneWithoutCarsInput
    Type?: TypeCreateNestedOneWithoutCarsInput
  }

  export type carsUncheckedCreateWithoutManufactureInput = {
    id?: number
    plate: string
    model_id?: bigint | number | null
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    transmission_id?: bigint | number | null
    available: boolean
    type_id?: bigint | number | null
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: bigint | number | null
  }

  export type carsCreateOrConnectWithoutManufactureInput = {
    where: carsWhereUniqueInput
    create: XOR<carsCreateWithoutManufactureInput, carsUncheckedCreateWithoutManufactureInput>
  }

  export type carsCreateManyManufactureInputEnvelope = {
    data: carsCreateManyManufactureInput | carsCreateManyManufactureInput[]
    skipDuplicates?: boolean
  }

  export type carsUpsertWithWhereUniqueWithoutManufactureInput = {
    where: carsWhereUniqueInput
    update: XOR<carsUpdateWithoutManufactureInput, carsUncheckedUpdateWithoutManufactureInput>
    create: XOR<carsCreateWithoutManufactureInput, carsUncheckedCreateWithoutManufactureInput>
  }

  export type carsUpdateWithWhereUniqueWithoutManufactureInput = {
    where: carsWhereUniqueInput
    data: XOR<carsUpdateWithoutManufactureInput, carsUncheckedUpdateWithoutManufactureInput>
  }

  export type carsUpdateManyWithWhereWithoutManufactureInput = {
    where: carsScalarWhereInput
    data: XOR<carsUpdateManyMutationInput, carsUncheckedUpdateManyWithoutManufactureInput>
  }

  export type carsCreateWithoutModelInput = {
    plate: string
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    available: boolean
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    Fuel?: FuelCreateNestedOneWithoutCarsInput
    Manufacture?: ManufactureCreateNestedOneWithoutCarsInput
    Transmission?: TransmissionCreateNestedOneWithoutCarsInput
    Type?: TypeCreateNestedOneWithoutCarsInput
  }

  export type carsUncheckedCreateWithoutModelInput = {
    id?: number
    plate: string
    manufacture_id?: bigint | number | null
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    transmission_id?: bigint | number | null
    available: boolean
    type_id?: bigint | number | null
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: bigint | number | null
  }

  export type carsCreateOrConnectWithoutModelInput = {
    where: carsWhereUniqueInput
    create: XOR<carsCreateWithoutModelInput, carsUncheckedCreateWithoutModelInput>
  }

  export type carsCreateManyModelInputEnvelope = {
    data: carsCreateManyModelInput | carsCreateManyModelInput[]
    skipDuplicates?: boolean
  }

  export type carsUpsertWithWhereUniqueWithoutModelInput = {
    where: carsWhereUniqueInput
    update: XOR<carsUpdateWithoutModelInput, carsUncheckedUpdateWithoutModelInput>
    create: XOR<carsCreateWithoutModelInput, carsUncheckedCreateWithoutModelInput>
  }

  export type carsUpdateWithWhereUniqueWithoutModelInput = {
    where: carsWhereUniqueInput
    data: XOR<carsUpdateWithoutModelInput, carsUncheckedUpdateWithoutModelInput>
  }

  export type carsUpdateManyWithWhereWithoutModelInput = {
    where: carsScalarWhereInput
    data: XOR<carsUpdateManyMutationInput, carsUncheckedUpdateManyWithoutModelInput>
  }

  export type carsCreateWithoutTransmissionInput = {
    plate: string
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    available: boolean
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    Fuel?: FuelCreateNestedOneWithoutCarsInput
    Manufacture?: ManufactureCreateNestedOneWithoutCarsInput
    Model?: ModelCreateNestedOneWithoutCarsInput
    Type?: TypeCreateNestedOneWithoutCarsInput
  }

  export type carsUncheckedCreateWithoutTransmissionInput = {
    id?: number
    plate: string
    manufacture_id?: bigint | number | null
    model_id?: bigint | number | null
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    available: boolean
    type_id?: bigint | number | null
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: bigint | number | null
  }

  export type carsCreateOrConnectWithoutTransmissionInput = {
    where: carsWhereUniqueInput
    create: XOR<carsCreateWithoutTransmissionInput, carsUncheckedCreateWithoutTransmissionInput>
  }

  export type carsCreateManyTransmissionInputEnvelope = {
    data: carsCreateManyTransmissionInput | carsCreateManyTransmissionInput[]
    skipDuplicates?: boolean
  }

  export type carsUpsertWithWhereUniqueWithoutTransmissionInput = {
    where: carsWhereUniqueInput
    update: XOR<carsUpdateWithoutTransmissionInput, carsUncheckedUpdateWithoutTransmissionInput>
    create: XOR<carsCreateWithoutTransmissionInput, carsUncheckedCreateWithoutTransmissionInput>
  }

  export type carsUpdateWithWhereUniqueWithoutTransmissionInput = {
    where: carsWhereUniqueInput
    data: XOR<carsUpdateWithoutTransmissionInput, carsUncheckedUpdateWithoutTransmissionInput>
  }

  export type carsUpdateManyWithWhereWithoutTransmissionInput = {
    where: carsScalarWhereInput
    data: XOR<carsUpdateManyMutationInput, carsUncheckedUpdateManyWithoutTransmissionInput>
  }

  export type carsCreateWithoutTypeInput = {
    plate: string
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    available: boolean
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    Fuel?: FuelCreateNestedOneWithoutCarsInput
    Manufacture?: ManufactureCreateNestedOneWithoutCarsInput
    Model?: ModelCreateNestedOneWithoutCarsInput
    Transmission?: TransmissionCreateNestedOneWithoutCarsInput
  }

  export type carsUncheckedCreateWithoutTypeInput = {
    id?: number
    plate: string
    manufacture_id?: bigint | number | null
    model_id?: bigint | number | null
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    transmission_id?: bigint | number | null
    available: boolean
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: bigint | number | null
  }

  export type carsCreateOrConnectWithoutTypeInput = {
    where: carsWhereUniqueInput
    create: XOR<carsCreateWithoutTypeInput, carsUncheckedCreateWithoutTypeInput>
  }

  export type carsCreateManyTypeInputEnvelope = {
    data: carsCreateManyTypeInput | carsCreateManyTypeInput[]
    skipDuplicates?: boolean
  }

  export type carsUpsertWithWhereUniqueWithoutTypeInput = {
    where: carsWhereUniqueInput
    update: XOR<carsUpdateWithoutTypeInput, carsUncheckedUpdateWithoutTypeInput>
    create: XOR<carsCreateWithoutTypeInput, carsUncheckedCreateWithoutTypeInput>
  }

  export type carsUpdateWithWhereUniqueWithoutTypeInput = {
    where: carsWhereUniqueInput
    data: XOR<carsUpdateWithoutTypeInput, carsUncheckedUpdateWithoutTypeInput>
  }

  export type carsUpdateManyWithWhereWithoutTypeInput = {
    where: carsScalarWhereInput
    data: XOR<carsUpdateManyMutationInput, carsUncheckedUpdateManyWithoutTypeInput>
  }

  export type FuelCreateWithoutCarsInput = {
    id?: bigint | number
    type: string
    price: number
    octan_rating: number
  }

  export type FuelUncheckedCreateWithoutCarsInput = {
    id?: bigint | number
    type: string
    price: number
    octan_rating: number
  }

  export type FuelCreateOrConnectWithoutCarsInput = {
    where: FuelWhereUniqueInput
    create: XOR<FuelCreateWithoutCarsInput, FuelUncheckedCreateWithoutCarsInput>
  }

  export type ManufactureCreateWithoutCarsInput = {
    id?: bigint | number
    manufacture: string
    address?: string | null
  }

  export type ManufactureUncheckedCreateWithoutCarsInput = {
    id?: bigint | number
    manufacture: string
    address?: string | null
  }

  export type ManufactureCreateOrConnectWithoutCarsInput = {
    where: ManufactureWhereUniqueInput
    create: XOR<ManufactureCreateWithoutCarsInput, ManufactureUncheckedCreateWithoutCarsInput>
  }

  export type ModelCreateWithoutCarsInput = {
    id?: bigint | number
    type: string
    year?: number | null
  }

  export type ModelUncheckedCreateWithoutCarsInput = {
    id?: bigint | number
    type: string
    year?: number | null
  }

  export type ModelCreateOrConnectWithoutCarsInput = {
    where: ModelWhereUniqueInput
    create: XOR<ModelCreateWithoutCarsInput, ModelUncheckedCreateWithoutCarsInput>
  }

  export type TransmissionCreateWithoutCarsInput = {
    id?: bigint | number
    type: string
    number_of_gears?: number | null
  }

  export type TransmissionUncheckedCreateWithoutCarsInput = {
    id?: bigint | number
    type: string
    number_of_gears?: number | null
  }

  export type TransmissionCreateOrConnectWithoutCarsInput = {
    where: TransmissionWhereUniqueInput
    create: XOR<TransmissionCreateWithoutCarsInput, TransmissionUncheckedCreateWithoutCarsInput>
  }

  export type TypeCreateWithoutCarsInput = {
    id?: bigint | number
    type: string
    description?: string | null
  }

  export type TypeUncheckedCreateWithoutCarsInput = {
    id?: bigint | number
    type: string
    description?: string | null
  }

  export type TypeCreateOrConnectWithoutCarsInput = {
    where: TypeWhereUniqueInput
    create: XOR<TypeCreateWithoutCarsInput, TypeUncheckedCreateWithoutCarsInput>
  }

  export type FuelUpsertWithoutCarsInput = {
    update: XOR<FuelUpdateWithoutCarsInput, FuelUncheckedUpdateWithoutCarsInput>
    create: XOR<FuelCreateWithoutCarsInput, FuelUncheckedCreateWithoutCarsInput>
    where?: FuelWhereInput
  }

  export type FuelUpdateToOneWithWhereWithoutCarsInput = {
    where?: FuelWhereInput
    data: XOR<FuelUpdateWithoutCarsInput, FuelUncheckedUpdateWithoutCarsInput>
  }

  export type FuelUpdateWithoutCarsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    octan_rating?: IntFieldUpdateOperationsInput | number
  }

  export type FuelUncheckedUpdateWithoutCarsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    octan_rating?: IntFieldUpdateOperationsInput | number
  }

  export type ManufactureUpsertWithoutCarsInput = {
    update: XOR<ManufactureUpdateWithoutCarsInput, ManufactureUncheckedUpdateWithoutCarsInput>
    create: XOR<ManufactureCreateWithoutCarsInput, ManufactureUncheckedCreateWithoutCarsInput>
    where?: ManufactureWhereInput
  }

  export type ManufactureUpdateToOneWithWhereWithoutCarsInput = {
    where?: ManufactureWhereInput
    data: XOR<ManufactureUpdateWithoutCarsInput, ManufactureUncheckedUpdateWithoutCarsInput>
  }

  export type ManufactureUpdateWithoutCarsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    manufacture?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManufactureUncheckedUpdateWithoutCarsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    manufacture?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ModelUpsertWithoutCarsInput = {
    update: XOR<ModelUpdateWithoutCarsInput, ModelUncheckedUpdateWithoutCarsInput>
    create: XOR<ModelCreateWithoutCarsInput, ModelUncheckedCreateWithoutCarsInput>
    where?: ModelWhereInput
  }

  export type ModelUpdateToOneWithWhereWithoutCarsInput = {
    where?: ModelWhereInput
    data: XOR<ModelUpdateWithoutCarsInput, ModelUncheckedUpdateWithoutCarsInput>
  }

  export type ModelUpdateWithoutCarsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ModelUncheckedUpdateWithoutCarsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TransmissionUpsertWithoutCarsInput = {
    update: XOR<TransmissionUpdateWithoutCarsInput, TransmissionUncheckedUpdateWithoutCarsInput>
    create: XOR<TransmissionCreateWithoutCarsInput, TransmissionUncheckedCreateWithoutCarsInput>
    where?: TransmissionWhereInput
  }

  export type TransmissionUpdateToOneWithWhereWithoutCarsInput = {
    where?: TransmissionWhereInput
    data: XOR<TransmissionUpdateWithoutCarsInput, TransmissionUncheckedUpdateWithoutCarsInput>
  }

  export type TransmissionUpdateWithoutCarsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    number_of_gears?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TransmissionUncheckedUpdateWithoutCarsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    number_of_gears?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TypeUpsertWithoutCarsInput = {
    update: XOR<TypeUpdateWithoutCarsInput, TypeUncheckedUpdateWithoutCarsInput>
    create: XOR<TypeCreateWithoutCarsInput, TypeUncheckedCreateWithoutCarsInput>
    where?: TypeWhereInput
  }

  export type TypeUpdateToOneWithWhereWithoutCarsInput = {
    where?: TypeWhereInput
    data: XOR<TypeUpdateWithoutCarsInput, TypeUncheckedUpdateWithoutCarsInput>
  }

  export type TypeUpdateWithoutCarsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TypeUncheckedUpdateWithoutCarsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type carsCreateManyFuelInput = {
    id?: number
    plate: string
    manufacture_id?: bigint | number | null
    model_id?: bigint | number | null
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    transmission_id?: bigint | number | null
    available: boolean
    type_id?: bigint | number | null
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
  }

  export type carsUpdateWithoutFuelInput = {
    plate?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    Manufacture?: ManufactureUpdateOneWithoutCarsNestedInput
    Model?: ModelUpdateOneWithoutCarsNestedInput
    Transmission?: TransmissionUpdateOneWithoutCarsNestedInput
    Type?: TypeUpdateOneWithoutCarsNestedInput
  }

  export type carsUncheckedUpdateWithoutFuelInput = {
    id?: IntFieldUpdateOperationsInput | number
    plate?: StringFieldUpdateOperationsInput | string
    manufacture_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    model_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    transmission_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    available?: BoolFieldUpdateOperationsInput | boolean
    type_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
  }

  export type carsUncheckedUpdateManyWithoutFuelInput = {
    id?: IntFieldUpdateOperationsInput | number
    plate?: StringFieldUpdateOperationsInput | string
    manufacture_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    model_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    transmission_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    available?: BoolFieldUpdateOperationsInput | boolean
    type_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
  }

  export type carsCreateManyManufactureInput = {
    id?: number
    plate: string
    model_id?: bigint | number | null
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    transmission_id?: bigint | number | null
    available: boolean
    type_id?: bigint | number | null
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: bigint | number | null
  }

  export type carsUpdateWithoutManufactureInput = {
    plate?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    Fuel?: FuelUpdateOneWithoutCarsNestedInput
    Model?: ModelUpdateOneWithoutCarsNestedInput
    Transmission?: TransmissionUpdateOneWithoutCarsNestedInput
    Type?: TypeUpdateOneWithoutCarsNestedInput
  }

  export type carsUncheckedUpdateWithoutManufactureInput = {
    id?: IntFieldUpdateOperationsInput | number
    plate?: StringFieldUpdateOperationsInput | string
    model_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    transmission_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    available?: BoolFieldUpdateOperationsInput | boolean
    type_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type carsUncheckedUpdateManyWithoutManufactureInput = {
    id?: IntFieldUpdateOperationsInput | number
    plate?: StringFieldUpdateOperationsInput | string
    model_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    transmission_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    available?: BoolFieldUpdateOperationsInput | boolean
    type_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type carsCreateManyModelInput = {
    id?: number
    plate: string
    manufacture_id?: bigint | number | null
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    transmission_id?: bigint | number | null
    available: boolean
    type_id?: bigint | number | null
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: bigint | number | null
  }

  export type carsUpdateWithoutModelInput = {
    plate?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    Fuel?: FuelUpdateOneWithoutCarsNestedInput
    Manufacture?: ManufactureUpdateOneWithoutCarsNestedInput
    Transmission?: TransmissionUpdateOneWithoutCarsNestedInput
    Type?: TypeUpdateOneWithoutCarsNestedInput
  }

  export type carsUncheckedUpdateWithoutModelInput = {
    id?: IntFieldUpdateOperationsInput | number
    plate?: StringFieldUpdateOperationsInput | string
    manufacture_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    transmission_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    available?: BoolFieldUpdateOperationsInput | boolean
    type_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type carsUncheckedUpdateManyWithoutModelInput = {
    id?: IntFieldUpdateOperationsInput | number
    plate?: StringFieldUpdateOperationsInput | string
    manufacture_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    transmission_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    available?: BoolFieldUpdateOperationsInput | boolean
    type_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type carsCreateManyTransmissionInput = {
    id?: number
    plate: string
    manufacture_id?: bigint | number | null
    model_id?: bigint | number | null
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    available: boolean
    type_id?: bigint | number | null
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: bigint | number | null
  }

  export type carsUpdateWithoutTransmissionInput = {
    plate?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    Fuel?: FuelUpdateOneWithoutCarsNestedInput
    Manufacture?: ManufactureUpdateOneWithoutCarsNestedInput
    Model?: ModelUpdateOneWithoutCarsNestedInput
    Type?: TypeUpdateOneWithoutCarsNestedInput
  }

  export type carsUncheckedUpdateWithoutTransmissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    plate?: StringFieldUpdateOperationsInput | string
    manufacture_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    model_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    type_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type carsUncheckedUpdateManyWithoutTransmissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    plate?: StringFieldUpdateOperationsInput | string
    manufacture_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    model_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    type_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type carsCreateManyTypeInput = {
    id?: number
    plate: string
    manufacture_id?: bigint | number | null
    model_id?: bigint | number | null
    image?: string | null
    rentPerDay: number
    capacity: number
    description?: string | null
    availableAt: string
    transmission_id?: bigint | number | null
    available: boolean
    year: number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: bigint | number | null
  }

  export type carsUpdateWithoutTypeInput = {
    plate?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    Fuel?: FuelUpdateOneWithoutCarsNestedInput
    Manufacture?: ManufactureUpdateOneWithoutCarsNestedInput
    Model?: ModelUpdateOneWithoutCarsNestedInput
    Transmission?: TransmissionUpdateOneWithoutCarsNestedInput
  }

  export type carsUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    plate?: StringFieldUpdateOperationsInput | string
    manufacture_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    model_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    transmission_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    available?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type carsUncheckedUpdateManyWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    plate?: StringFieldUpdateOperationsInput | string
    manufacture_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    model_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    rentPerDay?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    availableAt?: StringFieldUpdateOperationsInput | string
    transmission_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    available?: BoolFieldUpdateOperationsInput | boolean
    year?: IntFieldUpdateOperationsInput | number
    options?: NullableJsonNullValueInput | InputJsonValue
    specs?: NullableJsonNullValueInput | InputJsonValue
    fuel_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use FuelCountOutputTypeDefaultArgs instead
     */
    export type FuelCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FuelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ManufactureCountOutputTypeDefaultArgs instead
     */
    export type ManufactureCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ManufactureCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ModelCountOutputTypeDefaultArgs instead
     */
    export type ModelCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ModelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransmissionCountOutputTypeDefaultArgs instead
     */
    export type TransmissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransmissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TypeCountOutputTypeDefaultArgs instead
     */
    export type TypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FuelDefaultArgs instead
     */
    export type FuelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FuelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ManufactureDefaultArgs instead
     */
    export type ManufactureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ManufactureDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ModelDefaultArgs instead
     */
    export type ModelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ModelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransmissionDefaultArgs instead
     */
    export type TransmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransmissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TypeDefaultArgs instead
     */
    export type TypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use carsDefaultArgs instead
     */
    export type carsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = carsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}